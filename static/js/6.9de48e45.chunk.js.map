{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","hooks/useApproval.ts","hooks/useGetLotteryHasDrawn.ts","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/Home.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","hooks/useTokenBalance.ts","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTickets.ts","utils/lotteryUtils.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useBuyLottery.ts","hooks/useAllowance.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","console","error","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","lotteryContract","useLottery","getLotteryStatus","state","fetchLotteryStatus","StyledSpacer","props","spacing","StyledTokenAdornmentWrapper","StyledMaxText","primary","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","alignItems","type","inputMode","min","placeholder","num","toLocaleString","BuyTicketModal","amount","onDismiss","val","setVal","setRequestedBuy","fullBalance","useMemo","maxTickets","parseInt","getFullDisplayBalance","LOTTERY_TICKET_PRICE","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","numbers","Array","apply","Math","floor","random","toString","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","title","e","currentTarget","validity","valid","Tips","Announce","Final","ModalActions","variant","isInteger","TicketsList","WarningModal","CakeWinnings","claimAmount","cakeAmount","claimAmountBusd","LotteryJackpot","rewards","useTotalRewards","rewardsBusd","bold","getBalanceAmount","toJSON","StyledLotteryCard","LotteryCard","requestClaim","setRequestedClaim","useTotalClaim","setLastUpdated","onMultiClaim","useMultiClaimLottery","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","handleClaim","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","acentPerBlock","ACENT_PER_BLOCK","TRANSFER_TAX","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responsedata","stats","tvl","Object","keys","forEach","key","liquidity","fetchPoolsTotalStaking","pools","acentPrice","price","pool","total","totalStaked","fetchData","useGetStats","maximumFractionDigits","Hero","Cards","BaseLayout","mediaQueries","sm","lg","Home","as","Page","FarmStakingCard","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","eth","getBalance","walletBalance","refresh","Date","now","setStateLastUpdated","previousLastUpdated","usePreviousValue","ref","setRewards","getTotalRewards","setClaimAmount","claimLoading","setClaimLoading","ticketsContract","useLotteryTicket","getTotalClaim","claim","useWinningNumbers","winningNumbers","setWinningNumbers","getWinningNumbers","useTickets","lotteryNumber","tickets","setTickets","getTickets","multiCall","abi","getWeb3NoAccount","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","i","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","decodeFunctionResult","multiBuy","numbersList","times","send","from","on","tx","transactionHash","customLotteryNum","issueIndex","getTicketsAmount","calls1","options","ticketAbi","tokenIds","calls2","ticketIssues","finalTokenids","ticketIssue","push","calls3","multiClaim","claimedStatus","unClaimedIds","lotteryAbi","finalTokenIds","r","drawed","calls4","p","c","sum","getMax","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","historyNumbers","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","children","l","React","Children","toArray","child","lotteryTicketContract","txHash","setMax","fetchMax","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency"],"mappings":"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","file":"static/js/6.9de48e45.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingAcent',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingAcent',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React from 'react'\r\nimport { Text } from 'acentswap-uikit-hwan'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from 'acentswap-uikit-hwan'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from 'acentswap-uikit-hwan'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"acent logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('ACENT to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('ACENT in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? t('Collecting ACENT')\r\n                : t('Harvest all (%count%)', {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import { useCallback, useState } from 'react'\r\nimport { useLotteryApprove } from './useApprove'\r\n\r\nexport const useApproval = (onPresentApprove: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { onApprove } = useLotteryApprove()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n      onPresentApprove()\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, onPresentApprove])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport default useApproval\r\n","import { useEffect, useState } from 'react'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from 'acentswap-uikit-hwan'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  value: string\r\n  onSelectMax?: () => void\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\">\r\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\r\n        <StyledTokenAdornmentWrapper>\r\n          <StyledSpacer />\r\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n          <StyledSpacer />\r\n          <Button size=\"sm\" onClick={onSelectMax}>\r\n            {t('Max')}\r\n          </Button>\r\n        </StyledTokenAdornmentWrapper>\r\n      </Flex>\r\n      <StyledMaxText>\r\n        {t('%num% %symbol% Available', { num: max.toLocaleString(), symbol: availableSymbol })}\r\n      </StyledMaxText>\r\n    </>\r\n  )\r\n}\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Modal } from 'acentswap-uikit-hwan'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport TicketInput from 'components/TicketInput'\r\nimport ModalActions from 'components/ModalActions'\r\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\r\n\r\ninterface BuyTicketModalProps {\r\n  max: BigNumber\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\r\n  const [val, setVal] = useState('1')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [, setRequestedBuy] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getBalanceNumber(max)\r\n  }, [max])\r\n\r\n  const maxTickets = useMemo(() => {\r\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\r\n  }, [max])\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.validity.valid) {\r\n      setVal(e.currentTarget.value)\r\n    }\r\n  }\r\n\r\n  const { onMultiBuy } = useMultiBuyLottery()\r\n  const maxNumber = useMaxNumber()\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n      setRequestedBuy(true)\r\n      const length = parseInt(val)\r\n      // @ts-ignore\r\n      // eslint-disable-next-line prefer-spread\r\n      const numbers = Array.apply(null, { length }).map(() => [\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n      ])\r\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedBuy(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\r\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\r\n    } else {\r\n      setVal(maxTickets.toString())\r\n    }\r\n  }, [maxTickets])\r\n\r\n  const cakeCosts = (amount: string): number => {\r\n    return +amount * LOTTERY_TICKET_PRICE\r\n  }\r\n  return (\r\n    <Modal title={t('Enter amount of tickets to buy')} onDismiss={onDismiss}>\r\n      <TicketInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol=\"TICKET\"\r\n        availableSymbol=\"ACENT\"\r\n      />\r\n      <div>\r\n        <Tips>{t(`1 Ticket = ${LOTTERY_TICKET_PRICE} ACENT`, { num: LOTTERY_TICKET_PRICE })}</Tips>\r\n      </div>\r\n      <div>\r\n        <Announce>\r\n          {t('Ticket purchases are final. Your ACENT cannot be returned to you after buying tickets.')}\r\n        </Announce>\r\n        <Final>{t('You will spend: %amount% ACENT', { amount: cakeCosts(val) })}</Final>\r\n      </div>\r\n      <ModalActions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"lottery-buy-complete\"\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx ||\r\n            !Number.isInteger(parseInt(val)) ||\r\n            parseInt(val) > Number(maxTickets) ||\r\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\r\n            parseInt(val) < 1\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await handleBuy()\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketModal\r\n\r\nconst Tips = styled.div`\r\n  margin-left: 0.4em;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nconst Final = styled.div`\r\n  margin-top: 1em;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\nconst Announce = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 0.4em;\r\n  color: #ed4b9e;\r\n`\r\n","import React from 'react'\r\nimport { Button, Modal } from 'acentswap-uikit-hwan'\r\nimport ModalActions from 'components/ModalActions'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Modal title={t('Warning')} onDismiss={onDismiss}>\r\n      <TicketsList>\r\n        {t('Lottery ticket purchases are final.')}\r\n        <br />\r\n        {t('Your ACENT will not be returned to you after you spend it to buy tickets.')}\r\n        <br />\r\n        {t('Tickets are only valid for one lottery draw, and will be burned after the draw.')}\r\n        <br />\r\n        {t(\r\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\r\n        )}\r\n      </TicketsList>\r\n      <ModalActions>\r\n        <Button width=\"100%\" onClick={onDismiss}>\r\n          {t('I understand')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst TicketsList = styled.div`\r\n  text-align: left;\r\n  overflow-y: auto;\r\n  max-height: 400px;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nexport default WarningModal\r\n","import React from 'react'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Text } from 'acentswap-uikit-hwan'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\ninterface CakeWinningsProps {\r\n  claimAmount: BigNumber\r\n}\r\n\r\nconst CakeWinnings: React.FC<CakeWinningsProps> = ({ claimAmount }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeAmount = getBalanceNumber(claimAmount)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\r\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={claimAmountBusd} decimals={2} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from 'acentswap-uikit-hwan'\r\nimport { useTotalRewards } from 'hooks/useTickets'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport CardBusdValue from \"./CardBusdValue\"\r\n\r\nconst LotteryJackpot = () => {\r\n  const rewards = useTotalRewards()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const rewardsBusd = rewards.multipliedBy(cakePriceBusd)\r\n  return (\r\n    <>\r\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\r\n        {getBalanceAmount(rewards).toJSON()} ACENT\r\n      </Text>\r\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={getBalanceAmount(rewardsBusd).toNumber()} />}\r\n      <br />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from 'acentswap-uikit-hwan'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim} from 'hooks/useTickets'\r\nimport { useApproval } from 'hooks/useApproval'\r\nimport { useLotteryAllowance } from 'hooks/useAllowance'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport BuyTicketModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\n\r\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst LotteryCard = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n\r\n  const [requestClaim, setRequestedClaim] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { claimAmount, setLastUpdated } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const allowance = useLotteryAllowance()\r\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\r\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n        setLastUpdated()\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim, setLastUpdated])\r\n\r\n  const renderLotteryTicketButtonBuyOrApprove = () => {\r\n    if (!allowance.toNumber()) {\r\n      return (\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n          {t('Approve ACENT')}\r\n        </Button>\r\n      )\r\n    }\r\n    if (lotteryHasDrawn) {\r\n      return <Button disabled> {t('On sale soon')}</Button>\r\n    }\r\n    return (\r\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy}>\r\n        {t('Buy Tickets')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  const [onPresentBuy] = useModal(<BuyTicketModal max={cakeBalance} />)\r\n\r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {t('Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket.svg\" alt=\"acent logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('ACENT to Collect')}:</Label>\r\n          <CakeWinnings claimAmount={claimAmount} />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('Total jackpot this round')}:</Label>\r\n          <LotteryJackpot />\r\n        </Block>\r\n        {account ? (\r\n          <Actions>\r\n            <Button\r\n              id=\"dashboard-collect-winnings\"\r\n              disabled={getBalanceNumber(claimAmount) === 0 || requestClaim}\r\n              onClick={handleClaim}\r\n              style={{ marginRight: '8px' }}\r\n            >\r\n              {t('Collect Winnings')}\r\n            </Button>\r\n            {renderLotteryTicketButtonBuyOrApprove()}\r\n          </Actions>\r\n        ) : (\r\n          <Actions>\r\n            <UnlockButton width=\"100%\" />\r\n          </Actions>\r\n        )}\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default LotteryCard\r\n","import React from 'react'\r\nimport { ACENT_PER_BLOCK, TRANSFER_TAX } from 'config'\r\n\r\nimport { Card, CardBody, Heading, Text } from 'acentswap-uikit-hwan'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n  const acentPerBlock = ACENT_PER_BLOCK.toNumber()\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {t('Acent Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total ACENT Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total ACENT Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('New ACENT/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={acentPerBlock} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Transfer ACENT Fee')}</Text>\r\n          <Text fontSize=\"14px\">{TRANSFER_TAX}%</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from 'acentswap-uikit-hwan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{t('Across all LPs and Acent Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useState } from 'react'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nimport { fetchPoolsTotalStaking } from '../state/pools/fetchPools'\r\n\r\n/*\r\n * Due to Cors the api was forked and a proxy was created\r\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\r\n */\r\nexport const baseUrl = 'https://api.acentswap.info/api'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface ApiSummaryResponse {\r\n  update_at: string\r\n  data: Map<string, Summary>\r\n}\r\n\r\nexport interface Summary {\r\n  liquidity: string\r\n}\r\n\r\nexport interface Stats {\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<Stats | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/summary`)\r\n        const responsedata: ApiSummaryResponse = await response.json()\r\n\r\n        const stats: Stats = { tvl: 0 }\r\n        // eslint-disable-next-line\r\n        Object.keys(responsedata.data).forEach(function (key) {\r\n          stats.tvl += parseInt(responsedata.data[key].liquidity)\r\n        })\r\n\r\n        const pools = await fetchPoolsTotalStaking()\r\n        const acentPrice = parseInt(\r\n          responsedata.data['0x55d398326f99059fF775485246999027B3197955_0x8fe4D28476cDd43D36a12EB47dC3243C1925f263']\r\n            .price,\r\n        )\r\n        pools.forEach((pool) => {\r\n          const total = getBalanceNumber(new BigNumber(pool.totalStaked), 18) / acentPrice\r\n          stats.tvl += total\r\n        })\r\n\r\n        setData(stats)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from 'acentswap-uikit-hwan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\n\r\nconst Hero = styled.div`\r\n  background-image: url('/images/pan-bg.png');\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  background-position: center center, center center;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  box-shadow: rgb(146 146 146 / 35%) 0px 0px 0px 3000px inset;\r\n  display: flex;\r\n  -webkit-box-pack: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto auto 25px;\r\n  padding: 32px 16px;\r\n  text-align: center;\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <div>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {t('AcentSwap')}\r\n        </Heading>\r\n        <Text>{t('Trade, Yield Farm & AMM on Acent block Chain.')}</Text>\r\n      </Hero>\r\n      <Page>\r\n        <div>\r\n          <Cards>\r\n            <FarmStakingCard />\r\n            <LotteryCard />\r\n          </Cards>\r\n          <Cards>\r\n            <CakeStats />\r\n            <TotalValueLockedCard />\r\n          </Cards>\r\n        </div>\r\n      </Page>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from 'acentswap-uikit-hwan'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = () => {\r\n    setStateLastUpdated(Date.now())\r\n  }\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      setTickets(res)\r\n    }\r\n\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(BIG_ZERO)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      setRewards(new BigNumber(res))\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(BIG_ZERO)\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setClaimLoading(true)\r\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n    setClaimAmount(claim)\r\n    setClaimLoading(false)\r\n  }, [account, lotteryContract, ticketsContract])\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, fetchBalance, lotteryContract, ticketsContract, lastUpdated])\r\n\r\n  return { claimLoading, claimAmount, setLastUpdated }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      setWinningNumbers(rewards)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winningNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const matchedNumbers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      setMatchingNumbers(matchedNumbers)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { getMulticallAddress } from './addressHelpers'\r\nimport { BIG_ZERO } from './bigNumber'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finalTokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finalTokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finalTokenIds.length > 200) {\r\n    finalTokenIds = finalTokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finalTokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenIds = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIndex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenIds.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return BIG_ZERO\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIndex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\r\n\r\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLotteryAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useCake } from './useContract'\r\nimport useRefresh from './useRefresh'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllowance()\r\n    }\r\n  }, [account, cakeContract, fastRefresh])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetch()\r\n    }\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n"],"sourceRoot":""}