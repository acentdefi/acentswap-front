{"version":3,"sources":["views/Predictions/components/History/BetResult.tsx","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","hooks/ticker.ts","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/Header.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/index.tsx","hooks/useTokenBalance.ts","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","utils/getTimePeriods.ts"],"names":["Result","usePollRoundData","dispatch","useAppDispatch","account","useWeb3React","useEffect","timer","setInterval","a","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","clearInterval","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","useState","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","useTheme","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","getBalanceAmount","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","seconds","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","methods","claim","send","from","once","result","transactionHash","href","error","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","borderColor","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","call","refundable","fetchRefundableStatus","TokenPair","StyledBetResult","textDisabled","BetResult","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResultPosition","getRoundResult","markBetAsCollected","betId","roundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","size","checked","onChange","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","orderBy","map","RoundMultiplierDownArrow","isActive","fill","viewBox","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","type","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","roundId","state","setState","claimedLocal","setClaimedLocal","firstBetResponse","transformBetResponse","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","flexDirection","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useTokenPairTicker","tokenPair","connectOnMount","isConnected","stream","setStream","websocket","connect","useCallback","navigator","onLine","ws","WebSocket","onopen","onclose","onerror","Error","onmessage","evt","data","JSON","parse","eventType","e","eventTime","E","s","priceChange","parseFloat","priceChangePercent","P","weightAveragePrice","w","firstTrade","lastPrice","c","lastQuantity","Number","Q","bestBidPrice","b","bestBidQuantity","B","bestAskPrice","bestAskQuantity","A","openPrice","o","highPrice","h","lowPrice","l","totalTradedBaseAssetVolume","v","totalTradedQuoteAssetVolume","q","statisticsOpenTime","O","statisticsCloseTime","C","firstTradeId","F","lastTradeId","L","totalNumberOfTrades","n","disconnect","close","useBnbUsdtTicker","BNBUSDT","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","isBull","priceColor","tooltipContent","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","BigNumber","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","percentage","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","balanceDisplay","maxBalance","gt","minus","valueAsBn","percentageOfMaxBalance","percentageDisplay","isNaN","showFieldWarning","minBetAmountBalance","eq","lt","getButtonProps","bnValue","lte","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","newValue","target","isWarning","inputProps","name","min","max","onValueChanged","step","valueLabel","percent","betMethod","decimalValue","getDecimalAmount","errorMsg","UnlockButton","OpenRoundCard","isSettingPosition","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","partialBet","useBlockCountdown","secondsRemaining","setSecondsRemaining","web3","getWeb3NoAccount","eth","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","useGetBetByRoundId","fetchRoundBet","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","pl","display","TimerLabel","pr","StyledPrevNextNav","Icon","PrevNextNav","rounds","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","update","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","rel","useOnNextRound","previousEpoch","usePreviousValue","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","overflowX","overflowY","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","resizeObserver","PositionsPane","HistoryPane","ChartPane","isChartPaneOpen","ExpandChartButton","Button","text","ContentWrapper","StyledDesktop","Desktop","useIsChartPaneOpen","ERROR","PAUSED","setChartPaneState","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","activeIndex","getActiveIndex","onItemClick","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","htmlFor","marginBottom","Predictions","useMatchBreakpoints","isLg","isXl","usePersistState","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentRiskDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","setBalance","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useLastUpdated","lastUpdated","setLastUpdated","getBalance","walletBalance","refresh","useTokenBalance","fastRefresh","Date","now","setStateLastUpdated","previousLastUpdated","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","delta","abs","timeLeft","years","months","days"],"mappings":"6KAeYA,E,0ICUGC,EAjBU,WACvB,IAAMC,EAAWC,cACTC,EAAYC,cAAZD,QAERE,qBAAU,WACR,IAAMC,EAAQC,YAAW,sBAAC,4BAAAC,EAAA,sEACCC,cADD,OAClBC,EADkB,OAGxBT,EAASU,YAAiBD,IAHF,2CAIvBE,KAEH,OAAO,WACLC,cAAcP,MAEf,CAACH,EAASF,K,eCZAa,EARGC,IAAOC,IAAV,8JACC,qBAAGC,MAAkBC,OAAOC,UAAUC,a,wBCWhDC,EAAmBC,YAAH,+fAgChBC,EAAoBD,YAAH,qRAiBjBE,EAAoBC,YAAH,iDACRJ,GAGTK,EAAqBD,YAAH,iDACTF,GAGTI,EAAUZ,IAAOC,IAAV,2iBAcPQ,EAYAE,GAGF,qBAAGT,MAAkBW,aAAaC,MAUhCC,EAAQf,IAAOC,IAAV,sLAEW,qBAAGC,MAAkBC,OAAOa,aAyEnCC,EAjEc,WAC3B,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACQC,EAAMC,cAAND,EACFE,EAAMC,iBAAO,MACbjC,EAAQiC,iBAAO,MACbpC,EAAYC,cAAZD,QACFqC,EAAmBC,cACnBC,EAAoBC,cACpB1C,EAAWC,cAwCjB,OA5BAG,qBAAU,WAgBR,OAfIF,IACFG,EAAMsC,QAAUrC,YAAW,sBAAC,8BAAAC,EAAA,sEACPqC,YAAc,CAAEC,KAAM3C,EAAQ4C,cAAeC,SAAS,IAD/C,OACpBC,EADoB,OAIpBC,EAAaD,EAAKE,QAAO,SAACC,GAC9B,OAAOA,EAAIC,WAAaD,EAAIE,MAAMD,YAG/BX,GACHP,EAAUe,EAAWK,OAAS,GATN,2CAWzB,MAGE,WACL1C,cAAcP,EAAMsC,YAErB,CAACzC,EAASG,EAAOkC,EAAkBL,EAAWO,IAGjDrC,qBAAU,WACJqC,GACFP,GAAU,KAEX,CAACO,EAAmBP,IAGrB,cAACqB,EAAA,EAAD,CAAeC,GAAIvB,EAAQwB,eAAa,EAACC,QAASrB,EAAKsB,QAAS,IAAMC,WAAW,QAAjF,SACE,cAAClC,EAAD,CAASW,IAAKA,EAAd,SACE,eAACR,EAAD,WACE,cAAC,KAAD,CAAgBgC,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzD,cAAC,IAAD,CAAQF,MAAO,CAAEC,KAAM,GAAKE,QA3CV,WACxBjE,EAASkE,aAAoB,KA0CvB,SACG/B,EAAE,sBAEL,cAAC,IAAD,CAAYgC,QAAQ,OAAOF,QA1Cf,WAClB/B,GAAU,GACVtB,cAAcP,EAAMsC,UAwCd,SACE,cAAC,IAAD,CAAWyB,MAAM,UAAUP,MAAM,mBCxKhCQ,EAAgBC,6BAAuBC,GAerCC,EAbQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,EAA4BzC,mBAAqB,MAAjD,mBAAO0C,EAAP,KAAeC,EAAf,KASA,OAAO,cAACN,EAAcO,SAAf,CAAwBC,MAAO,CAAEH,SAAQC,YAAWG,cAPrC,WAChBJ,IACFA,EAAOK,UACPJ,EAAU,SAIP,SAAsEF,KCbzEO,EAAmB,uCAAG,sBAAAzE,EAAA,+EAC1B,IAAI0E,SAAc,SAACC,GAAD,OAChBC,OAAOC,eAAeC,OAAQ,cAAe,CAC3CC,cAAc,EACdC,IAF2C,SAEvCV,GACFW,KAAKC,GAAKZ,EACVK,EAAQL,UANY,2CAAH,qDAWnBa,GAAwB,SAACC,EAAqB3E,GAIlD,IAAI2E,EAAeC,OAAO,CACxBC,UAAU,EACVC,OAAQ,OACRC,OAAQ,kBACRC,SAAU,IACVC,SAAU,UACVjF,MAAOA,EAAMkF,OAAS,OAAS,QAC/BpC,MAAO,IACPqC,OAAQ,KACRC,WAAY,UACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,aAAc,uBA0BHC,GAtBK,WAClB,IAAMxF,EAAQyF,cAcd,OAZArG,qBAAU,WAEJiF,OAAOmB,YAETd,GAAsBL,OAAOmB,YAAaxF,GAE1CgE,IAAsB0B,MAAK,SAACjB,GAC1BC,GAAsBD,EAAIzE,QAG7B,CAACA,IAGF,cAAC,IAAD,CAAK2F,SAAS,SAASC,UAAU,wBAAjC,SACE,qBAAKC,GAAG,yBCxCRnF,GAAUZ,IAAOC,IAAV,+HAQP+F,GAAchG,IAAOC,IAAV,oEAKXgG,GAAkBjG,IAAOC,IAAV,uIA2BNiG,GAlBmC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOxC,EAAe,EAAfA,SAC1D,OACE,cAAC,GAAD,UACE,eAACqC,GAAD,WACE,cAACC,GAAD,UACE,qBAAKG,IAAI,uCAAuCC,IAAI,mBAAmBrB,OAAO,QAAQjC,MAAM,YAE9F,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASuD,GAAG,OAAZ,SAAoBH,IACnBxC,aCtBE4C,GAnBW,WACxB,IAAQlF,EAAMC,cAAND,EACFnC,EAAWC,cAKjB,OACE,eAAC,GAAD,CAAcgH,MAAO9E,EAAE,SAAvB,UACE,cAAC,KAAD,CAAMmF,GAAG,IAAIF,GAAG,OAAhB,SACGjF,EAAE,qFAEL,cAAC,IAAD,CAAQgC,QAAQ,UAAUN,MAAM,OAAOI,QARjB,WACxBjE,EAASkE,aAAoB,KAO3B,SACG/B,EAAE,sBCWIoF,GAxBW,WACxB,IAAQpF,EAAMC,cAAND,EACFnC,EAAWC,cAMjB,OACE,eAAC,GAAD,CAAcgH,MAAO9E,EAAE,kBAAvB,UACE,eAAC,IAAD,CAAKiF,GAAG,OAAR,UACE,cAAC,KAAD,CAAME,GAAG,IAAT,SAAcnF,EAAE,0DAChB,cAAC,KAAD,CAAMmF,GAAG,IAAT,SAAcnF,EAAE,6CAChB,cAAC,KAAD,CAAMmF,GAAG,IAAT,SACGnF,EAAE,oGAGP,cAAC,IAAD,CAAQgC,QAAQ,UAAUN,MAAM,OAAOI,QAbjB,WACxBjE,EAASkE,aAAoB,KAY3B,SACG/B,EAAE,sB,6BCnBEqF,GAAe,SAACC,GAC3B,OAAOC,aAAiBD,EAAO,KAGpBE,GAAY,SAACC,GACxB,MAAM,IAAN,OAAWC,aAAaD,GAAO,EAAG,EAAG,KAG1BE,GAAY,SAACC,GACxB,OAAOA,EAAMA,EAAIC,oBAAezD,EAAW,CAAE0D,sBAAuB,EAAGC,sBAAuB,IAAO,KAO1FC,GAAU,SAACC,GAAD,OAAiBA,EAAIC,WAAWC,SAAS,EAAG,MAEtDC,GAAkB,SAACC,GAC9B,MAAoCC,aAAeD,GAA3CE,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,QAClBC,EAAc,UAAMV,GAAQQ,GAAd,YAA0BR,GAAQS,IAEtD,OAAIF,EAAQ,EACJ,GAAN,OAAUP,GAAQO,GAAlB,YAA4BG,GAGvBA,GAGIC,GAAgB,SAACC,EAAeC,GAC3C,OAAc,IAAVD,GAA0B,IAAXC,EACV,EAGFD,EAAQC,GAMJC,GAAY,SAAC9F,GACxB,IAAKA,IAAQA,EAAIE,MACf,OAAO,EAGT,MAAgDF,EAAIE,MAA5C6F,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,YAC1BC,EAAaP,GAAcM,EAAajG,EAAIC,WAAakG,IAAYC,KAAOL,EAAaC,GAC/F,OAAOhG,EAAI6F,OAASK,GAITG,GAAyB,SAACxI,GACrC,OAAIA,EAAMkF,OACD,sEAGF,wE,4BC/BHuD,GAAQ3I,YAAO4I,KAAP5I,CAAH,kDAILiG,GAAkBjG,IAAOC,IAAV,iKA4FN4I,GApF6D,SAAC,GAKtE,IAJLC,EAII,EAJJA,OACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,UACAC,EACI,EADJA,UAEA,EAAsC/H,oBAAS,GAA/C,mBAAOgI,EAAP,KAAoBC,EAApB,KACQ/J,EAAYC,cAAZD,QACAiC,EAAMC,cAAND,EACR,EAAqC+H,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAChBC,EAAsBC,eACtBC,EAAeC,cAqCrB,OACE,eAACf,GAAD,CAAOgB,SAAS,QAAQrH,SAAS,WAAWsH,GAAG,QAA/C,UACE,cAAC,GAAD,UACE,qBAAKxD,IAAI,sCAAsCC,IAAI,mBAAmBrB,OAAO,QAAQjC,MAAM,YAE7F,eAAC,KAAD,WACE,cAAC,KAAD,UACE,cAAC,IAAD,UAAU1B,EAAE,wBAEd,cAAC,KAAD,CAAkB2H,UAAWA,OAE/B,eAAC,KAAD,CAAWa,EAAE,OAAb,UACE,cAAC,KAAD,CAAgB9G,MAAM,OAAO+G,GAAG,OAAOxD,GAAG,SAC1C,eAAC,IAAD,CAAMyD,WAAW,QAAQC,eAAe,gBAAgB1D,GAAG,OAA3D,UACE,cAAC,KAAD,UAAOjF,EAAE,gBACT,eAAC,IAAD,CAAK2B,MAAO,CAAEiH,UAAW,SAAzB,UACE,cAAC,KAAD,oBAAUjD,GAAU8B,GAApB,UACA,cAAC,KAAD,CAAMoB,SAAS,OAAO5G,MAAM,aAA5B,qBACQ0D,GAAUyC,EAAaU,MAAMrB,GAAQsB,qBAIjD,cAAC,IAAD,CACErH,MAAM,OACNuD,GAAG,MACHnD,QA5DY,WAClBoG,EAAoBc,QACjBC,MAAMvB,GACNwB,KAAK,CAAEC,KAAMpL,IACbqL,KAAK,WAAW,WACftB,GAAe,MAEhBsB,KAAK,UANR,uCAMmB,WAAOC,GAAP,SAAAjL,EAAA,0DACXwJ,EADW,gCAEPA,IAFO,OAKfE,GAAe,GACfH,IACAK,EACEhI,EAAE,uBACF,eAAC,IAAD,WACE,cAAC,KAAD,CAAMmF,GAAG,IAAIF,GAAG,MAAhB,SACGjF,EAAE,+CAEJqJ,EAAOC,iBACN,cAAC,KAAD,CAAcC,KAAI,iCAA4BF,EAAOC,iBAArD,SACGtJ,EAAE,yBAfI,2CANnB,uDA2BGoJ,KAAK,SAAS,SAACI,GACd1B,GAAe,GACfG,EAAW,QAAD,OAAUuB,QAAV,IAAUA,OAAV,EAAUA,EAAOC,SAC3BC,QAAQF,MAAMA,OA8BZG,UAAW9B,EACX+B,QAAS/B,EAAc,cAAC,IAAD,CAAegC,MAAI,EAAC5H,MAAM,iBAAoB,KALvE,SAOGjC,EAAE,oB,0DCzFE8J,GApBqD,SAAC,GAO9D,IANLrC,EAMI,EANJA,OACAC,EAKI,EALJA,MACAqC,EAII,EAJJA,WACAnC,EAGI,EAHJA,UACAtF,EAEI,EAFJA,SACG0H,EACC,mBACJ,EAAwCC,aACtC,cAAC,GAAD,CAA2BxC,OAAQA,EAAQC,MAAOA,EAAOE,UAAWA,KACpE,GAFKsC,EAAP,oBAKA,OACE,cAAC,IAAD,yBAAQpI,QAASoI,EAA+BC,SAAUJ,GAAgBC,GAA1E,aACG1H,M,oCC2BQ8H,GAxCqD,SAAC,GAA8C,IAA5C1C,EAA2C,EAA3CA,MAAOE,EAAoC,EAApCA,UAAWtF,EAAyB,EAAzBA,SAAa0H,EAAY,mBAChH,EAAsCnK,oBAAS,GAA/C,mBAAOgI,EAAP,KAAoBC,EAApB,KACQ9H,EAAMC,cAAND,EACAjC,EAAYC,cAAZD,QACFmK,EAAsBC,eAC5B,EAAqCJ,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAuBtB,OACE,cAAC,IAAD,yBACEnG,QAvBkB,WACpBoG,EAAoBc,QACjBC,MAAMvB,GACNwB,KAAK,CAAEC,KAAMpL,IACbqL,KAAK,WAAW,WACftB,GAAe,MAEhBsB,KAAK,UANR,sBAMmB,sBAAAhL,EAAA,0DACXwJ,EADW,gCAEPA,IAFO,OAIfE,GAAe,GACfE,EAAahI,EAAE,wBALA,4CAOhBoJ,KAAK,SAAS,SAACI,GACd1B,GAAe,GACfG,EAAW,QAAD,OAAUuB,QAAV,IAAUA,OAAV,EAAUA,EAAOC,SAC3BC,QAAQF,MAAMA,OAOhBG,UAAW9B,EACX+B,QAAS/B,EAAc,cAAC,IAAD,CAAegC,MAAI,EAAC5H,MAAM,UAAa,MAC1D+H,GAJN,aAMG1H,GAAYtC,EAAE,wB,yECtCfqK,GAAY1L,YAAO2L,IAAP3L,CAAH,+EACO,gBAAG4L,EAAH,EAAGA,GAAH,SAAO1L,MAAkBC,OAAOyL,MAIzCC,GAA0B,SAAC,GAAgE,IAAD,IAA7DD,UAA6D,MAAxD,UAAwD,EAA7CE,EAA6C,EAA7CA,UAAWnI,EAAkC,EAAlCA,SAAUR,EAAwB,EAAxBA,QAAYkI,EAAY,mBAC/FU,EAAOD,GAAa,cAAC,IAAD,CAAaxI,MAAM,UAE7C,OACE,eAACoI,GAAD,yBACE3B,WAAW,SACXC,eAAe,SACfgC,aAAa,MACbJ,GAAIA,EACJK,GAAG,MACHC,GAAG,MACH/I,QAASA,EACTH,MAAO,CAAEmJ,OAAQhJ,EAAU,UAAY,WACnCkI,GATN,cAWGU,EACD,cAAC,KAAD,CAAMK,cAAc,YAAY9I,MAAM,QAAQ+I,GAAG,MAAjD,SACG1I,SAqBM2I,GAXiC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,YAAa5I,EAAyB,EAAzBA,SAAa0H,EAAY,mBACjFmB,EAAeD,IAAgB/D,IAAYC,KAC3CsD,EAAOS,EAAe,cAAC,IAAD,CAAalJ,MAAM,UAAa,cAAC,IAAD,CAAeA,MAAM,UAEjF,OACE,cAAC,GAAD,yBAAKsI,GAAIY,EAAe,UAAY,UAAWV,UAAWC,GAAUV,GAApE,aACG1H,M,8ICpCD8I,GAAqB,SAACnE,GAC1B,OAAKA,EAIEtB,GAAUsB,GAHR,KAMLoE,GAAM,SAAC,GAA4B,IAA1B/I,EAAyB,EAAzBA,SAAa0H,EAAY,mBACtC,OACE,cAAC,IAAD,yBAAMtB,WAAW,SAASC,eAAe,iBAAoBqB,GAA7D,aACG1H,MAKMgJ,GAA4C,SAAC,GAA+B,IAA7BrE,EAA4B,EAA5BA,YAAgB+C,EAAY,mBAC9EhK,EAAMC,cAAND,EAER,OACE,eAAC,GAAD,2BAASgK,GAAT,cACE,eAAC,KAAD,CAAMuB,MAAI,EAAV,UAAYvL,EAAE,cAAd,OACA,cAAC,KAAD,CAAMuL,MAAI,EAAV,mBAAeH,GAAmBnE,GAAlC,eAYOuE,GAAsC,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,cAAevE,EAAmC,EAAnCA,WAAYL,EAAuB,EAAvBA,OAAWmD,EAAY,mBAC9FhK,EAAMC,cAAND,EACF0L,EAAmB,UAAMxE,EAAWrB,oBAAezD,EAAW,CAAE2D,sBAAuB,IAApE,KAEzB,OACE,eAAC,GAAD,yBAAKpC,OAAO,QAAWqG,GAAvB,cACE,eAAC,KAAD,CAAMnB,SAAS,OAAOkC,cAAc,YAApC,UACGU,EADH,OAGA,eAAC,IAAD,CAAM/C,WAAW,SAAjB,UACE,cAAC,KAAD,CAAMG,SAAS,OAAO8C,WAAW,OAAOJ,MAAI,EAA5C,SACGvL,EAAE,sBAAuB,CAAEkH,WAAYwE,MAE1C,cAAC,KAAD,CAAMjD,GAAG,MAAT,eACA,cAAC,KAAD,CAAMI,SAAS,OAAO8C,WAAW,OAAjC,mBAA4ChG,GAAUkB,GAAtD,kBAWK+E,GAA4C,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAc7B,EAAY,mBAC5EhK,EAAMC,cAAND,EAER,OACE,eAAC,GAAD,2BAASgK,GAAT,cACE,eAAC,KAAD,CAAMnB,SAAS,OAAf,UAAuB7I,EAAE,gBAAzB,OACA,cAAC,KAAD,CAAM6I,SAAS,OAAf,SAAuBrD,GAAUqG,UAuCjCC,GAAanN,YAAOoN,IAAPpN,CAAH,yFA1BW,SAAC,GAM0B,IALpDE,EAKmD,EALnDA,MACAqM,EAImD,EAJnDA,YACAc,EAGmD,EAHnDA,OACAC,EAEmD,EAFnDA,OACAC,EACmD,EADnDA,WAEA,OAAIF,EACK,oDAGLE,GAAcD,EACTpN,EAAMC,OAAOa,UAGlBuL,IAAgB/D,IAAYC,KACvBvI,EAAMC,OAAOqN,QAGlBjB,IAAgB/D,IAAYiF,KACvBvN,EAAMC,OAAOuN,QAGfxN,EAAMC,OAAOwN,eAShBC,GAAuB5N,IAAOC,IAAV,0FACV,qBAAGC,MAAkB2N,KAAKC,cAK7BC,GAAgD,SAAC,GAMvD,IAAD,IALJV,cAKI,aAJJE,kBAII,aAHJD,cAGI,SAFJ3J,EAEI,EAFJA,SACG0H,EACC,mBACJ,OACE,cAAC8B,GAAD,yBAAYE,OAAQA,EAAQE,WAAYA,EAAYD,OAAQA,GAAYjC,GAAxE,aACE,cAACuC,GAAD,UAAuBjK,Q,wBC9FdqK,GA/BiC,SAAC,GAAmC,IAAjCzL,EAAgC,EAAhCA,MAAOoB,EAAyB,EAAzBA,SAAa0H,EAAY,mBACzE6B,EAAuC3K,EAAvC2K,UAAWe,EAA4B1L,EAA5B0L,WAAY3F,EAAgB/F,EAAhB+F,YACzBiE,EAAc0B,EAAaf,EAAY1E,IAAYC,KAAOD,IAAYiF,KACtES,EAAe3B,IAAgB/D,IAAYC,KACzCpH,EAAMC,cAAND,EACF8M,EAAkBF,EAAaf,EAErC,OACE,eAAC,GAAD,yBAAgBX,YAAaA,GAAiBlB,GAA9C,cACE,cAAC,KAAD,CAAM/H,MAAM,aAAa4G,SAAS,OAAO0C,MAAI,EAACR,cAAc,YAAY9F,GAAG,MAA3E,SACGjF,EAAE,kBAEJkB,EAAM6L,OACL,cAAC,KAAD,CAAMxB,MAAI,EAACR,cAAc,YAAY9I,MAAM,eAAegD,GAAG,OAAO4D,SAAS,OAA7E,SACG7I,EAAE,cAGL,eAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,OAA5D,UACE,cAAC,KAAD,CAAMhD,MAAO4K,EAAe,UAAY,UAAWtB,MAAI,EAAC1C,SAAS,OAAjE,SACGrD,GAAUoH,KAEb,cAAC,GAAD,CAAa1B,YAAaA,EAA1B,SAAwC1F,GAAUsH,QAGrDjB,GAAa,cAAC,GAAD,CAAcA,UAAWA,IACvC,cAAC,GAAD,CAAc5E,YAAaA,IAC1B3E,OCTQ0K,GAzBS,SAACtF,GACvB,MAAwC7H,oBAAS,GAAjD,mBAAOoN,EAAP,KAAqBC,EAArB,KACMhF,EAAsBC,eACpBpK,EAAYC,cAAZD,QAmBR,OAjBAE,qBAAU,WAYJF,GAXuB,uCAAG,4BAAAK,EAAA,sEACL8J,EAAoBc,QAAQmE,UAAUzF,EAAO3J,GAASqP,OADjD,mDAIDlF,EAAoBc,QAAQqE,WAAW3F,EAAO3J,GAASqP,OAJtD,OAIpBC,EAJoB,OAK1BH,EAAgBG,GALU,wBAO1BH,GAAgB,GAPU,4CAAH,oDAYzBI,KAED,CAACvP,EAAS2J,EAAOQ,EAAqBgF,IAElC,CAAED,eAAcC,qB,ShBXbvP,K,UAAAA,E,YAAAA,E,oBAAAA,E,aAAAA,M,KAYZ,I,mDiBxBY4P,GjBwBNC,GAAkB7O,YAAOoN,IAAPpN,CAAH,wHACC,qBAAGE,MAAkBC,OAAO2O,gBAyHnCC,GAnH6B,SAAC,GAAqB,IAAnB1M,EAAkB,EAAlBA,IAAKqI,EAAa,EAAbA,OAC1CrJ,EAAMC,cAAND,EACFnC,EAAWC,cACTC,EAAYC,cAAZD,QACAkP,EAAiBD,GAAgBhM,EAAIE,MAAMwG,OAA3CuF,aACF7E,EAAeC,cAGfZ,EAAS4B,IAAW1L,EAAOgQ,IAAM7G,GAAU9F,GAAOA,EAAI6F,OAEtD+G,EAAiB,WACrB,OAAQvE,GACN,KAAK1L,EAAOgQ,IACV,MAAO,UACT,KAAKhQ,EAAOkQ,KACV,MAAO,aACT,KAAKlQ,EAAOmQ,SACV,MAAO,eACT,QACE,MAAO,SAyCPC,EAAa,uCAAG,sBAAA3P,EAAA,sEACdP,EAASmQ,YAAS,CAAEjQ,UAAS2G,GAAI1D,EAAI0D,MADvB,2CAAH,qDAInB,OACE,qCACE,eAAC,IAAD,CAAMgE,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,MAA5D,UACE,cAAC,IAAD,UAAUjF,EAAE,kBACZ,eAAC,IAAD,CAAM0I,WAAW,SAAjB,UACE,cAAC,IAAD,CAASvD,GAAG,KAAKlD,MAAO2L,IAAkB7C,cAAc,YAAYQ,MAAI,EAAC1J,GAAG,MAA5E,SA9Cc,WACpB,OAAQwH,GACN,KAAK1L,EAAOgQ,IACV,OAAO3N,EAAE,OACX,KAAKrC,EAAOkQ,KACV,OAAO7N,EAAE,QACX,KAAKrC,EAAOmQ,SACV,OAAO9N,EAAE,YACX,QACE,MAAO,IAsCFiO,KAlCW,WACpB,OAAQ5E,GACN,KAAK1L,EAAOgQ,IACV,OAAO,cAAC,KAAD,CAAW1L,MAAO2L,MAC3B,KAAKjQ,EAAOkQ,KACZ,KAAKlQ,EAAOmQ,SACV,OAAO,cAAC,IAAD,CAAW7L,MAAO2L,MAC3B,QACE,OAAO,MA4BJM,SAGL,eAACV,GAAD,WACGnE,IAAW1L,EAAOgQ,MAAQ3M,EAAIJ,SAC7B,cAAC,GAAD,CACE6G,OAAQA,EACRC,MAAO1G,EAAIE,MAAMwG,MACjBqC,WAAY/I,EAAIJ,QAChBc,MAAM,OACNuD,GAAG,OACH2C,UAAWmG,EANb,SAQG/N,EAAE,sBAGNqJ,IAAW1L,EAAOmQ,UAAYb,GAC7B,cAAC,GAAD,CAAuBvF,MAAO1G,EAAIE,MAAMwG,MAAOhG,MAAM,OAAOuD,GAAG,SAEjE,eAAC,IAAD,CAAMyD,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,OAA5D,UACE,cAAC,KAAD,UAAOjF,EAAE,oBACT,cAAC,GAAD,CAAakL,YAAalK,EAAIC,SAA9B,SACGD,EAAIC,WAAakG,IAAYC,KAAOpH,EAAE,MAAQA,EAAE,aAGrD,eAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,OAA5D,UACE,cAAC,KAAD,UAAOjF,EAAE,mBACT,cAAC,KAAD,oBAAU2F,GAAU3E,EAAI6F,QAAxB,aAEF,eAAC,IAAD,CAAM6B,WAAW,QAAQC,eAAe,gBAAxC,UACE,cAAC,KAAD,CAAM4C,MAAI,EAAV,SAAYvL,EAAE,iBACd,eAAC,IAAD,CAAK2B,MAAO,CAAEiH,UAAW,SAAzB,UACE,cAAC,KAAD,CAAM2C,MAAI,EAACtJ,MAxDE,WACrB,OAAQoH,GACN,KAAK1L,EAAOgQ,IACV,MAAO,UACT,KAAKhQ,EAAOkQ,KACV,MAAO,UACT,KAAKlQ,EAAOmQ,SACZ,QACE,MAAO,QAgDeK,GAAlB,mBAAwC9E,IAAW1L,EAAOkQ,KAAO,IAAM,KAAvE,OAA6ElI,GAAU8B,GAAvF,UACA,cAAC,KAAD,CAAMoB,SAAS,OAAO5G,MAAM,aAA5B,qBACQ0D,GAAUyC,EAAaU,MAAMrB,GAAQsB,4BkB9HnDqF,GAAmBzP,IAAOC,IAAV,2GACA,qBAAGC,MAAkBC,OAAOuP,YACrB,qBAAGxP,MAAkBC,OAAOwN,eAyC1CgC,GArC+B,SAAC,GAAqB,IAAnBtN,EAAkB,EAAlBA,IAAKqI,EAAa,EAAbA,OAC5CrJ,EAAMC,cAAND,EACR,EAAgDgB,EAAIE,MAA5C+F,EAAR,EAAQA,YAAaF,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,WAC3BuH,EAAiB5H,GAAcM,EAAaF,GAC5CyH,EAAiB7H,GAAcM,EAAaD,GAElD,OACE,eAACoH,GAAD,WACG/E,IAAW1L,EAAOmQ,UACjB,cAAC,KAAD,CAAM3I,GAAG,IAAIlD,MAAM,UAAUgD,GAAG,OAAhC,SACGjF,EACC,wHAILqJ,IAAW1L,EAAO8Q,MAAQ,cAAC,GAAD,CAAWzN,IAAKA,EAAKqI,OAAQA,IACxD,cAAC,IAAD,CAASpE,GAAG,MAAZ,SAAmBjF,EAAE,mBACrB,eAAC,GAAD,CAAakB,MAAOF,EAAIE,MAAO+D,GAAG,OAAlC,UACE,cAAC,GAAD,CAAWwG,cAAezL,EAAE,MAAOkH,WAAYqH,EAAgB1H,OAAQE,IACvE,cAAC,GAAD,CAAW0E,cAAezL,EAAE,QAASkH,WAAYsH,EAAgB3H,OAAQG,OAE3E,eAAC,IAAD,CAAM0B,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,MAA5D,UACE,cAAC,KAAD,UAAOjF,EAAE,mBACT,cAAC,KAAD,CAAMuJ,KAAI,oCAA+BvI,EAAIE,MAAMwN,WAAaC,UAAQ,EAAxE,SACG3N,EAAIE,MAAMwN,eAGf,eAAC,IAAD,CAAMhG,WAAW,SAASC,eAAe,gBAAzC,UACE,cAAC,KAAD,UAAO3I,EAAE,mBACT,cAAC,KAAD,CAAMuJ,KAAI,oCAA+BvI,EAAIE,MAAM0N,UAAYD,UAAQ,EAAvE,SACG3N,EAAIE,MAAM0N,kBCvBfC,GAAYlQ,YAAO2L,KAAMwE,MAAM,CAAEpG,WAAY,SAAUF,EAAG,QAA9C7J,CAAH,6GACO,qBAAGE,MAAkB2N,KAAKC,cACnB,qBAAG5N,MAAkBC,OAAOwN,eAInDyC,GAAapQ,YAAOoN,IAAPpN,CAAH,0CAgJDqQ,GA5I2B,SAAC,GAAa,IAsC9B3F,EAtCmBrI,EAAU,EAAVA,IAC3C,EAA4BnB,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACQ8G,EAAqC7F,EAArC6F,OAAQjG,EAA6BI,EAA7BJ,QAASK,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,MAE3BlB,EAAMC,cAAND,EACAjC,EAAYC,cAAZD,QACFF,EAAWC,cACXmR,EAAeC,cACfC,EAAS9O,cACT+O,EAAsBlO,EAAM0L,WAAa1L,EAAM2K,UAAY1E,IAAYC,KAAOD,IAAYiF,KAI1FiD,EAAiB,WACrB,OAAInO,EAAM6L,OACDpP,EAAOmQ,SAGZ5M,EAAMwG,OAASuH,EAAe,EACzBtR,EAAO8Q,KAGTxN,IAAamO,EAAsBzR,EAAOgQ,IAAMhQ,EAAOkQ,MA4B1DE,EAAa,uCAAG,sBAAA3P,EAAA,sDACpBP,EAASyR,YAAmB,CAAEvR,UAASwR,MAAOvO,EAAI0D,MAD9B,2CAAH,qDAIb8K,EAAcH,IACdI,EA9BgB,SAACpG,GACrB,OAAQA,GACN,KAAK1L,EAAOgQ,IACV,MAAO,UACT,KAAKhQ,EAAOkQ,KACV,MAAO,UACT,KAAKlQ,EAAOmQ,SACV,MAAO,eACT,QACE,MAAO,QAqBW4B,CAAcF,GAChCG,GAlBkBtG,EAkBgBmG,KAjBvB7R,EAAOkQ,KACb,IAGLxE,IAAW1L,EAAOgQ,IACb,IAGF,GAUHiC,EAAc1O,EAAMwG,QAAUuH,EAC9BY,EAAcV,IAAWW,IAAiBrB,MAAQvN,EAAMwG,QAAUuH,EAAe,EAGjFxH,EAAS+H,IAAgB7R,EAAOgQ,IAAM7G,GAAU9F,GAAO6F,EAqC7D,OACE,qCACE,eAACgI,GAAD,CAAW/M,QAzFI,kBAAM/B,GAAWD,IAyFAiQ,KAAK,SAArC,UACE,cAAC,IAAD,CAAKrO,MAAM,OAAX,SACE,eAAC,KAAD,CAAMkH,UAAU,SAAhB,UACE,cAAC,KAAD,CAAMC,SAAS,OAAO5G,MAAM,aAA5B,SACGjC,EAAE,WAEL,cAAC,KAAD,CAAMuL,MAAI,EAACI,WAAY,EAAvB,SACGzK,EAAMwG,MAAM7B,wBAInB,cAACkJ,GAAD,CAAYlE,GAAG,OAAf,SA/CA+E,EAEA,eAAC,IAAD,CAAMlH,WAAW,SAAjB,UACE,cAAC,KAAD,CAAuBzG,MAAM,UAAUJ,GAAG,MAAMH,MAAM,SACtD,cAAC,KAAD,CAAMO,MAAM,UAAUsJ,MAAI,EAA1B,SACGvL,EAAE,sBAMP6P,EAEA,eAAC,IAAD,CAAMnH,WAAW,SAAjB,UACE,cAAC,KAAD,CAAuBzG,MAAM,YAAYJ,GAAG,MAAMH,MAAM,SACxD,cAAC,KAAD,CAAMO,MAAM,YAAYsJ,MAAI,EAA5B,SACGvL,EAAE,iBAOT,qCACE,cAAC,KAAD,CAAM6I,SAAS,OAAO5G,MAAM,aAA5B,SACGjC,EAAE,iBAEL,cAAC,KAAD,CAAMuL,MAAI,EAACtJ,MAAOwN,EAAiB9D,WAAY,EAA/C,SACG6D,IAAgB7R,EAAOmQ,SAAW9N,EAAE,YAApC,UAAqD2P,GAArD,OAAwEhK,GAAU8B,WAoBpF+H,IAAgB7R,EAAOgQ,MAAQ/M,GAC9B,cAAC,GAAD,CACEgH,UAAWmG,EACXhE,WAAY/I,EAAIJ,QAChB8G,MAAO1G,EAAIE,MAAMwG,MACjBD,OAAQA,EACRuI,MAAM,KACNnO,GAAG,MANL,SAQG7B,EAAE,aAGNwP,IAAgB7R,EAAOmQ,WAAalN,GACnC,cAAC,GAAD,CAAuBgH,UAAWmG,EAAerG,MAAO1G,EAAIE,MAAMwG,MAAOsI,MAAM,KAAKnO,GAAG,MAAvF,SACG7B,EAAE,cAGL4P,IAAgBC,GAChB,cAAC,IAAD,CAAY7N,QAAQ,OAAOgO,MAAM,KAAjC,SACGlQ,EAAS,cAAC,IAAD,IAAoB,cAAC,IAAD,SAInCA,GAAU,cAAC,GAAD,CAAYkB,IAAKA,EAAKqI,OAAQgG,UCjKzCY,GAAStR,IAAOuR,MAAV,0HAONC,GAAexR,YAAOoN,IAAPpN,CAAH,mFACF,gBAAGE,EAAH,EAAGA,MAAH,OAAewI,GAAuBxI,MAKhDuR,GAAgB,SAACC,GACrB,OAAQA,GACN,KAAKC,IAAcC,UACjB,OAAO,EACT,KAAKD,IAAcE,YACjB,OAAO,EACT,KAAKF,IAAcG,IACnB,QACE,SAoESC,GAhEA,WACb,IAAML,EAAgBM,cAChBC,EAAoBC,cAClB7Q,EAAMC,cAAND,EACFnC,EAAWC,cACTC,EAAYC,cAAZD,QAMF+S,EAAe,SAACC,GAAD,6BAA8B,sBAAA3S,EAAA,yDAC7C2S,IAAcV,EAD+B,gCAEzCxS,EAASmT,YAAa,CAAEjT,UAAS6C,QAASwP,GAAcW,MAFf,OAG/ClT,EAASoT,YAAiBF,IAHqB,4CAOnD,OACE,eAACZ,GAAD,WACE,eAAC,IAAD,CAAMzH,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,OAA5D,UACE,cAAC,IAAD,CAASE,GAAG,KAAK+L,KAAK,KAAtB,SACGlR,EAAE,kBAEL,cAAC,IAAD,CAAQ8B,QAjBM,WAClBjE,EAASkE,aAAoB,KAgBKC,QAAQ,OAAO4H,QAAS,cAAC,IAAD,CAAkB3H,MAAM,YAAc4I,GAAG,IAA/F,SACG7K,EAAE,cAGP,cAAC,KAAD,CAAMiC,MAAM,aAAa4G,SAAS,OAAO5D,GAAG,MAA5C,SACGjF,EAAE,YAEL,eAAC,IAAD,CAAM0I,WAAW,SAAjB,UACE,eAACuH,GAAD,WACE,cAAC,KAAD,CACED,MAAM,KACNmB,QAASd,IAAkBC,IAAcG,IACzCtG,SAAUyG,IAAsB7S,EAChCqT,SAAUN,EAAaR,IAAcG,OAEvC,cAAC,KAAD,CAAMzF,GAAG,MAAT,SAAgBhL,EAAE,YAEpB,eAACiQ,GAAD,WACE,cAAC,KAAD,CACED,MAAM,KACNmB,QAASd,IAAkBC,IAAcC,UACzCpG,SAAUyG,IAAsB7S,EAChCqT,SAAUN,EAAaR,IAAcC,aAEvC,cAAC,KAAD,CAAMvF,GAAG,MAAT,SAAgBhL,EAAE,kBAEpB,eAACiQ,GAAD,WACE,cAAC,KAAD,CACED,MAAM,KACNmB,QAASd,IAAkBC,IAAcE,YACzCrG,SAAUyG,IAAsB7S,EAChCqT,SAAUN,EAAaR,IAAcE,eAEvC,cAAC,KAAD,CAAMxF,GAAG,MAAT,SAAgBhL,EAAE,2BC3EtBqR,GAAgB1S,IAAOC,IAAV,sHACG,qBAAGC,MAAkB2N,KAAKC,cAM1C6E,GAAa3S,IAAOC,IAAV,uGAOV2S,GAAiB5S,IAAOC,IAAV,6MAEE,qBAAGC,MAAkB2N,KAAKC,cAkEjC+E,GAxDC,WACd,IAAQxR,EAAMC,cAAND,EACAjC,EAAYC,cAAZD,QACFF,EAAWC,cACXwC,EAAoBC,cACpBqQ,EAAoBC,cACpBR,EAAgBM,cAChB1B,EAAeC,cACfrO,EAAO4Q,YAAuB1T,GAEpCE,qBAAU,WACJF,GAAWuC,GACbzC,EAASmT,YAAa,CAAEjT,eAEzB,CAACA,EAASkR,EAAc3O,EAAmBzC,IAI9C,IAAM6T,EACJrB,IAAkBC,IAAcE,YAC5B3P,EAAKE,QAAO,SAACC,GACX,OAAOA,EAAIC,WAAaD,EAAIE,MAAMD,WAAiC,IAArBD,EAAIE,MAAM6L,UAE1DlM,EAEN,OACE,eAACwQ,GAAD,WACE,cAAC,GAAD,IACA,eAACC,GAAD,WACGV,GACC,cAACW,GAAD,UACE,cAAC,KAAD,CAASL,KAAM,OAIlBQ,GAAWA,EAAQvQ,OAAS,EAC3BwQ,mBAAQD,EAAS,CAAC,eAAgB,CAAC,SAASE,KAAI,SAAC5Q,GAC/C,OAAO,cAAC,GAAD,CAA4BA,IAAKA,GAAbA,EAAI0D,OAGjC,eAAC,IAAD,CAAK8D,EAAE,OAAP,UACE,cAAC,IAAD,CAAS0I,KAAK,KAAKtI,UAAU,SAAS3D,GAAG,MAAzC,SACGjF,EAAE,sCAEL,cAAC,KAAD,CAAMmF,GAAG,IAAIyD,UAAU,SAAvB,SACG5I,EACC,iI,gGClFH6R,GAAsD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAa9H,EAAY,mBAEvF+H,EADQzN,cACKxF,OAAOgT,EAAW,UAAY,YAEjD,OACE,eAAC,KAAD,yBAAKnO,OAAO,OAAOjC,MAAM,QAAQsQ,QAAQ,cAAiBhI,GAA1D,cACE,mBAAGjJ,OAAO,kBAAV,SACE,sBACEkR,EAAE,yNACFF,KAAMA,MAGV,+BACE,yBACErN,GAAG,YACHwN,EAAE,UACFC,EAAE,IACFzQ,MAAM,MACNiC,OAAO,UACPyO,YAAY,iBACZC,0BAA0B,OAP5B,UASE,yBAASC,aAAa,IAAIjJ,OAAO,uBACjC,yBAASkJ,KAAK,SAASlR,GAAG,gBAAgBmR,IAAI,qBAAqBnJ,OAAO,UAC1E,+BACEhI,GAAG,cACHoR,KAAK,SACLC,OAAO,4CACPrJ,OAAO,cAET,6BACA,gCAAgBsJ,aAAa,MAC7B,6BAAaH,IAAI,YAAYI,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9D,+BAAeL,KAAK,SAASC,OAAO,+CACpC,yBAASH,KAAK,SAASC,IAAI,QAAQnJ,OAAO,kCAOvC0J,GAAoD,SAAC,GAA4B,IAA1BjB,EAAyB,EAAzBA,SAAa9H,EAAY,mBAErF+H,EADQzN,cACKxF,OAAOgT,EAAW,UAAY,YAEjD,OACE,eAAC,KAAD,yBAAKnO,OAAO,OAAOjC,MAAM,QAAQsQ,QAAQ,cAAiBhI,GAA1D,cACE,mBAAGjJ,OAAO,kBAAV,SACE,sBACEkR,EAAE,4NACFF,KAAMA,MAGV,+BACE,yBACErN,GAAG,YACHwN,EAAE,UACFC,EAAE,UACFzQ,MAAM,MACNiC,OAAO,UACPyO,YAAY,iBACZC,0BAA0B,OAP5B,UASE,yBAASC,aAAa,IAAIjJ,OAAO,uBACjC,yBAASkJ,KAAK,SAASlR,GAAG,gBAAgBmR,IAAI,qBAAqBnJ,OAAO,UAC1E,+BACEhI,GAAG,cACHoR,KAAK,SACLC,OAAO,4CACPrJ,OAAO,cAET,6BACA,gCAAgBsJ,aAAa,MAC7B,6BAAaH,IAAI,YAAYI,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9D,+BAAeL,KAAK,SAASC,OAAO,+CACpC,yBAASH,KAAK,SAASC,IAAI,QAAQnJ,OAAO,kCCzE9C2J,GAAmBrU,YAAO6L,MAAKsE,MAAM,CACzC9M,QAAS,YACTyI,UAAW,cAAC,IAAD,CAAqB/I,MAAM,UAFf/C,CAAH,kFAyBPsU,GAjB+B,SAAC,GAAgB,IAAdpM,EAAa,EAAbA,OACvC7G,EAAMC,cAAND,EACR,EAA+CkT,aAC7C,qBAAKvR,MAAO,CAAEwR,WAAY,UAA1B,mBAA0CxN,GAAUkB,GAApD,UACA,CAAEuM,UAAW,WAFPC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,eAAgBC,EAAnC,EAAmCA,QAKnC,OACE,qCACE,uBAAMrT,IAAKmT,EAAX,UACE,cAACL,GAAD,UAAmBhT,EAAE,aAA+B,OAC9C,IACPsT,GAAkBC,MCXnBC,GAAe7U,IAAOC,IAAV,mFAMZ6U,GAAU9U,IAAOC,IAAV,8MAYP8U,GAAoB/U,IAAOC,IAAV,qEAKjB+U,GACJ,eAACC,EAAD,uDAAY,aAAZ,OACA,SAAC9B,EAAmB+B,GAClB,OAAIA,EACK,eAGL/B,EACK,QAGF8B,IA6EIE,GA1EyC,SAAC,GAQlD,IAPL7M,EAOI,EAPJA,YACA8M,EAMI,EANJA,UACA7M,EAKI,EALJA,WAKI,IAJJgF,kBAII,aAHJhB,mBAGI,MAHU/D,IAAYC,KAGtB,MAFJyM,kBAEI,aADJ/B,gBACI,SACI9R,EAAMC,cAAND,EACFgU,EAAUL,GAAa,UAAbA,CAAwB7B,EAAU+B,GAC5CI,EAAYN,GAAa,UAAbA,CAAwB7B,EAAU+B,GAC9CK,EAAYP,KAAe7B,EAAU+B,GACrCM,EACJ,eAAC,IAAD,WACE,eAAC,IAAD,CAAMxL,eAAe,SAAShF,OAAO,OAArC,UACE,cAAC,KAAD,CAAMkF,SAAS,OAAO5G,MAAOiS,EAAW3I,MAAI,EAACI,WAAW,MAAxD,cACkBvJ,IAAf8E,EAAA,UAA8BA,EAAWrB,oBAAezD,EAAW,CAAE2D,sBAAuB,IAA5F,KAAsG,MAEzG,cAAC,KAAD,CAAM8C,SAAS,OAAO5G,MAAOiS,EAAWvI,WAAW,MAAMX,GAAG,MAA5D,SACGhL,EAAE,eAGP,cAAC,KAAD,CAAMiC,MAAOiS,EAAWrL,SAAS,OAAO8C,WAAW,OAAO/C,UAAU,SAApE,mBACMjD,GAAUsB,GADhB,aAMEmN,EAAgB,SAACnT,GACrB,OAAKiL,EAKH,cAACwH,GAAD,CAAmB/R,MAAOV,EAA1B,SACE,cAAC,GAAD,CAAY4F,OAAQkN,MALf,MAUX,OAAI7I,IAAgB/D,IAAYiF,KAE5B,cAAC,IAAD,CAAKnL,SAAS,WAAd,SACE,eAACuS,GAAD,WACE,cAAC,GAAD,CAA0B1B,SAAUA,IACnCsC,EAAc,CAAEC,OAAQ,EAAGC,MAAO,IACnC,eAACb,GAAD,YACII,GAAcM,EAChB,cAAC,KAAD,CAAM5I,MAAI,EAAC1C,SAAS,OAAO8C,WAAW,OAAO1G,GAAG,MAAMhD,MAAOgS,EAAWlJ,cAAc,YAAtF,SACG/K,EAAE,kBASb,cAAC,IAAD,CAAKiB,SAAS,WAAd,SACE,eAACuS,GAAD,WACE,cAAC,GAAD,CAAwB1B,SAAUA,IACjCsC,EAAc,CAAEG,IAAK,EAAGC,KAAM,IAC/B,eAACf,GAAD,WACE,cAAC,KAAD,CAAMlI,MAAI,EAAC1C,SAAS,OAAO8C,WAAW,OAAO1J,MAAO+R,EAASjJ,cAAc,YAA3E,SACG/K,EAAE,SAEH6T,GAAcM,WCpHXM,GAJF9V,YAAO+V,IAAP/V,CAAH,sDC+BJgW,GAAuB,SAACxF,EAAgByE,GAC5C,OAAQzE,GACN,IAAK,UACH,MAAO,eACT,IAAK,OACH,MAAO,QACT,IAAK,OACH,MAAO,YACT,IAAK,WACL,IAAK,cACH,MAAO,OACT,QACE,OAAOyE,IAIPgB,GAAmBjW,IAAOC,IAAV,iLAEN,mBAtCW,SAACC,EAAqBsQ,GAC/C,OAAQA,GACN,IAAK,cACH,OAAOtQ,EAAMC,OAAOC,UAAU8V,WAChC,IAAK,OACH,MAAO,cACT,IAAK,WACH,OAAOhW,EAAMC,OAAOgW,QACtB,IAAK,OACH,OAAOjW,EAAMC,OAAOa,UACtB,IAAK,UACL,IAAK,OACL,QACE,OAAOd,EAAMC,OAAOwN,aAyBayI,CAAvB,EAAGlW,MAAH,EAAUsQ,WAIb,kBAA4B,SAA5B,EAAGA,OAAkC,OAAS,SAGrD6F,GAAQrW,IAAOC,IAAV,uDAyBIqW,GArB+B,SAAC,GAAoC,IAAlC9F,EAAiC,EAAjCA,OAAQrK,EAAyB,EAAzBA,MAAO4C,EAAkB,EAAlBA,MAAOgD,EAAW,EAAXA,KAC/DwJ,EAAYS,GAAqBxF,EAAQ,QACzClD,EAAoB,SAAXkD,EAEf,OACE,eAACyF,GAAD,CAAkBzF,OAAQA,EAA1B,UACE,eAAC,IAAD,CAAMzG,WAAW,SAAjB,UACGgC,EACD,cAAC,KAAD,CAAMzI,MAAOiS,EAAW3I,KAAMU,EAAQlB,cAAekB,EAAS,YAAc,aAAcN,WAAW,OAArG,SACG7G,OAGL,cAACkQ,GAAD,UACE,cAAC,KAAD,CAAMnM,SAAUoD,EAAS,OAAS,OAAQhK,MAAO0S,GAAqBxF,EAAQ,cAAevG,UAAU,SAAvG,oBACOlB,W,uCC3DTnI,GAAUZ,YAAO2L,IAAP3L,CAAH,oIACS,qBAAGE,MAAkBC,OAAOa,aAM9C,YACA,OADkB,EAAfuV,SACY,2FA+EJC,GApEuD,SAAC,GAKhE,IAJLC,EAII,EAJJA,QACAlJ,EAGI,EAHJA,WAGI,IAFJgJ,gBAEI,SADDlL,EACC,mBACJ,EAA0BnK,mBAA2D,CACnF0P,MAAO,KACP7H,MAAO,KACPD,OAAQ,IAHV,mBAAO4N,EAAP,KAAcC,EAAd,KAKQvX,EAAYC,cAAZD,QACAiC,EAAMC,cAAND,EACFnC,EAAWC,cACXmR,EAAeC,cACrB,EAAwCrP,oBAAS,GAAjD,mBAAO0V,EAAP,KAAqBC,EAArB,KA2BA,GAvBAvX,qBAAU,WACR,IAAM+P,EAAQ,uCAAG,kCAAA5P,EAAA,sEACIqC,YAAc,CAAEC,KAAM3C,EAAQ4C,cAAeO,MAAOkU,EAASxU,SAAS,IAD1E,OAGK,KAFdC,EADS,QAGNM,SAAe,EAAD,YACMN,EADN,GACd4U,EADc,MAEfzU,EAAM0U,YAAqBD,IAEzBxU,WAAaD,EAAIE,MAAMD,UAC7BqU,EAAS,CACP/F,MAAOvO,EAAI0D,GACXgD,MAAO1G,EAAIE,MAAMwG,MACjBD,OAAQX,GAAU9F,MAXT,2CAAH,qDAiBVjD,GAAWmO,IAAeqJ,GAC5BvH,MAED,CAACjQ,EAASqX,EAASlJ,EAAY+C,EAAcqG,EAAUC,KAErDF,EAAM3N,MACT,OAAO,KAGT,IAAMqG,EAAa,uCAAG,sBAAA3P,EAAA,sDACpBP,EAASyR,YAAmB,CAAEC,MAAO8F,EAAM9F,MAAOxR,aAClDuX,EAAS,CAAE/F,MAAO,KAAM7H,MAAO,KAAMD,OAAQ,IAC7C+N,GAAgB,GAHI,2CAAH,qDAMnB,OACE,eAAC,GAAD,yBAAS9M,WAAW,SAASF,EAAE,OAAO0M,SAAUA,GAAclL,GAA9D,cACE,cAAC,KAAD,CAAgBtI,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzD,cAAC,GAAD,CACE4F,OAAQ4N,EAAM5N,OACdC,MAAO2N,EAAM3N,MACbqC,YAAY,EACZrI,MAAM,OACNkG,UAAWmG,EALb,SAOG/N,EAAE,2BC5CI2V,GAvC6C,SAAC,GAAe,IAAbzU,EAAY,EAAZA,MACrDlB,EAAMC,cAAND,EACF6D,EAAW+R,cACjB,EAA0C5I,GAAgB9L,EAAMwG,OAAxDuF,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBACdxF,EAAsBxG,EAAtBwG,MACFmO,EADwB3U,EAAf4U,WACwBjS,EAEjCkK,EAAa,uCAAG,sBAAA3P,EAAA,sDACpB8O,GAAgB,GADI,2CAAH,qDAInB,OACE,eAAC,GAAD,WACE,cAAC,GAAD,CACEiC,OAAO,WACPzE,KAAM,cAAC,IAAD,CAAW7I,GAAG,MAAMH,MAAM,SAChCoD,MAAO9E,EAAE,YACT0H,MAAOxG,EAAMwG,MACbqO,YAAaF,IAEf,eAAC,IAAD,CAAUrN,EAAE,OAAZ,UACE,cAAC,GAAD,CAAiBqL,YAAU,IAC3B,cAAC,GAAD,UACE,eAAC,IAAD,CAAMmC,cAAc,SAAStN,WAAW,SAAxC,UACE,cAAC,KAAD,CAAM6C,MAAI,EAACtJ,MAAOgL,EAAe,OAAS,eAA1C,SACGjN,EAAE,oBAEJiN,GAAgB,cAAC,GAAD,CAAuBvF,MAAOA,EAAOE,UAAWmG,EAAerM,MAAM,OAAOuU,GAAG,QAChG,cAAC,KAAD,CAAc1M,KAAK,uDAAuDoF,UAAQ,EAAlF,SACG3O,EAAE,qBAIT,cAAC,GAAD,CAAiBkL,YAAa/D,IAAYiF,KAAMyH,YAAU,WC5B5DqC,GAAyBvX,YAAO8V,GAAP9V,CAAH,kHA0DbwX,GAjD2C,SAAC,GAOpD,IANLjV,EAMI,EANJA,MACA6S,EAKI,EALJA,UACAqC,EAII,EAJJA,aACAC,EAGI,EAHJA,eACA9H,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQxO,EAAMC,cAAND,EACA0E,EAAgExD,EAAhEwD,GAAIkK,EAA4D1N,EAA5D0N,SAAU/C,EAAkD3K,EAAlD2K,UAAWe,EAAuC1L,EAAvC0L,WAAY5F,EAA2B9F,EAA3B8F,WAAYD,EAAe7F,EAAf6F,WACnDmE,EAAc0B,EAAaf,EAAY1E,IAAYC,KAAOD,IAAYiF,KACtEF,EAAakK,GAAgBC,EAEnC,OAAInV,EAAM6L,OACD,cAAC,GAAD,CAAmB7L,MAAOA,IAIjC,eAACgV,GAAD,WACE,cAAC,GAAD,CACE/G,OAAO,UACPzE,KAAM,cAAC,IAAD,CAAW7I,GAAG,MAAMH,MAAM,OAAOO,MAAM,iBAC7C6C,MAAO9E,EAAE,WACT+V,YAAanH,EACblH,MAAOxG,EAAMwG,QAEf,eAAC,IAAD,CAAUc,EAAE,OAAO7G,MAAO,CAAEV,SAAU,YAAtC,UACE,cAAC,GAAD,CAAwBmU,QAAS1Q,EAAIwH,WAAYA,EAAYgJ,SAAUmB,IACvE,cAAC,GAAD,CACEpP,YAAaF,EACbgN,UAAWA,EACX7M,WAAYqH,EACZuD,SAAU5G,IAAgB/D,IAAYC,KACtC8E,WAAYkK,IAEd,cAAC,GAAD,CAAalV,MAAOA,IACpB,cAAC,GAAD,CACE+F,YAAaD,EACb+M,UAAWA,EACX7M,WAAYsH,EACZtD,YAAa/D,IAAYiF,KACzB0F,SAAU5G,IAAgB/D,IAAYiF,KACtCF,WAAYmK,Y,SZrEV9I,K,mBAAAA,Q,KA2DL,I,yDAAM+I,GAAqB,SAACC,EAAsBC,GAGvD,IAAMC,EAActW,kBAAO,GAC3B,EAA4BN,mBAAuB,MAAnD,mBAAO6W,EAAP,KAAeC,EAAf,KACMC,EAAYzW,iBAAkB,MAE9B0W,EAAUC,uBAAY,WAC1B,GAAIC,UAAUC,SAAWP,EAAYjW,QAAS,CAC5C,IAAMyW,EAAK,IAAIC,UAAJ,mDAA0DX,EAA1D,YAEXU,EAAGE,OAAS,WACVV,EAAYjW,SAAU,GAGxByW,EAAGG,QAAU,WACXX,EAAYjW,SAAU,GAGxByW,EAAGI,QAAU,SAAC7N,GAEZ,MADAE,QAAQF,MAAM,UAAWA,GACnB,IAAI8N,MAAM,8BAGlBL,EAAGM,UAAY,SAACC,GACd,IACE,IAAMC,EAAOC,KAAKC,MAAMH,EAAIC,MAExBhB,EAAYjW,SACdmW,EAAU,CACRiB,UAAWH,EAAKI,EAChBC,UAAWL,EAAKM,EAChBnU,OAAQ6T,EAAKO,EACbC,YAAaC,WAAWT,EAAKjP,GAC7B2P,mBAAoBD,WAAWT,EAAKW,GACpCC,mBAAoBH,WAAWT,EAAKa,GACpCC,WAAYL,WAAWT,EAAKvF,GAC5BsG,UAAWN,WAAWT,EAAKgB,GAC3BC,aAAcC,OAAOlB,EAAKmB,GAC1BC,aAAcX,WAAWT,EAAKqB,GAC9BC,gBAAiBJ,OAAOlB,EAAKuB,GAC7BC,aAAcf,WAAWT,EAAKrZ,GAC9B8a,gBAAiBP,OAAOlB,EAAK0B,GAC7BC,UAAWlB,WAAWT,EAAK4B,GAC3BC,UAAWpB,WAAWT,EAAK8B,GAC3BC,SAAUtB,WAAWT,EAAKgC,GAC1BC,2BAA4Bf,OAAOlB,EAAKkC,GACxCC,4BAA6BjB,OAAOlB,EAAKoC,GACzCC,mBAAoBnB,OAAOlB,EAAKsC,GAChCC,oBAAqBrB,OAAOlB,EAAKwC,GACjCC,aAAcvB,OAAOlB,EAAK0C,GAC1BC,YAAazB,OAAOlB,EAAK4C,GACzBC,oBAAqB3B,OAAOlB,EAAK8C,KAGrC,MAAO/Q,GACPE,QAAQF,MAAR,iCAAgDA,KAIpDoN,EAAUpW,QAAUyW,KAErB,CAACL,EAAWL,EAAWE,EAAaE,IAEjC6D,EAAa1D,uBAAY,WAC7BL,EAAYjW,SAAU,EAElBoW,EAAUpW,SACZoW,EAAUpW,QAAQia,UAEnB,CAAChE,EAAaG,IAUjB,OARA3Y,qBAAU,WAKR,OAJIuY,GACFK,IAGK,kBAAM2D,OACZ,CAAC5D,EAAWC,EAAS2D,EAAYhE,EAAgBC,IAE7C,CAAEC,SAAQD,YAAaA,EAAYjW,QAASqW,UAAS2D,eAIjDE,GAAmB,WAA4B,IAA3BlE,IAA0B,yDACzD,OAAOF,GAAmB/I,GAAUoN,QAASnE,I,6BalIhCoE,GARqC,SAAC,GAAwC,IAAtC9E,EAAqC,EAArCA,WAAYlH,EAAyB,EAAzBA,SAAa5E,EAAY,mBAEpF6Q,GADmBC,cAAjBC,aAC6BjF,IAAelH,EAAWkH,GAAe,IACxEkF,EAAWH,GAAe,IAAMA,EAAc,IAEpD,OAAO,cAAC,KAAD,aAAUI,YAAaD,GAAchR,KCwC/BkR,GAxCyC,SAAC,GAAe,IAAbha,EAAY,EAAZA,MACjDlB,EAAMC,cAAND,EACF6D,EAAW+R,cACXC,EAAoB3U,EAAM4U,WAAajS,EAC7C,EAA+CqP,aAC7ClT,EAAE,0GACF,CAAEoT,UAAW,WAFPC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,QAASD,EAA5B,EAA4BA,eAK5B,OACE,qCACE,eAAC,GAAD,WACE,cAAC,GAAD,CACEnE,OAAO,cACPzE,KAAM,cAAC,KAAD,CAAU7I,GAAG,MAAMH,MAAM,SAC/BoD,MAAO9E,EAAE,eACT0H,MAAOxG,EAAMwG,MACbqO,YAAaF,IAEf,eAAC,IAAD,CAAUrN,EAAE,OAAZ,UACE,cAAC,GAAD,CAAiBqL,YAAU,IAC3B,cAAC,GAAD,UACE,eAAC,IAAD,CAAMnL,WAAW,SAASC,eAAe,SAASqN,cAAc,SAAhE,UACE,cAAC,KAAD,CAAS9E,KAAM,KACf,eAAC,IAAD,CAAM3I,GAAG,MAAT,UACE,cAAC,KAAD,UAAcvI,EAAE,iBAChB,sBAAME,IAAKmT,EAAX,SACE,cAAC,IAAD,cAKR,cAAC,GAAD,CAAiBnI,YAAa/D,IAAYiF,KAAMyH,YAAU,UAG7DP,GAAkBC,MCvBnB4H,GAAiBxc,IAAOC,IAAV,yIAMdwc,GAAezc,YAAO8V,GAAP9V,CAAH,kDACF,gBAAGE,EAAH,EAAGA,MAAH,OAAewI,GAAuBxI,MA8FvCwc,GA3FqC,SAAC,GAO9C,IANLna,EAMI,EANJA,MACA6S,EAKI,EALJA,UACAqC,EAII,EAJJA,aACAC,EAGI,EAHJA,eACA9H,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQxO,EAAMC,cAAND,EACA6L,EAAsC3K,EAAtC2K,UAAW6C,EAA2BxN,EAA3BwN,UAAWzH,EAAgB/F,EAAhB+F,YACtByP,EAAWgE,KAAXhE,OACAqE,EAAiBD,cAAjBC,aACFO,EAAgBC,cAChBC,GAAe,OAAN9E,QAAM,IAANA,OAAA,EAAAA,EAAQ8B,WAAY3M,EAC7B4P,EAAaD,EAAS,UAAY,UAClC3F,EAAoBnH,EAAY4M,EAChCxO,GAAwB,OAAN4J,QAAM,IAANA,OAAA,EAAAA,EAAQ8B,WAAY3M,EAEtC6P,EACJ,eAAC,IAAD,CAAKha,MAAM,QAAX,UACG1B,EAAE,iGACH,cAAC,KAAD,CAAcuJ,KAAK,uDAAuDhB,GAAG,MAA7E,SACGvI,EAAE,mBAIT,EAA+CkT,aAAWwI,EAAgB,CAAEtI,UAAW,WAA/EC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,QAASD,EAA5B,EAA4BA,eAE5B,OAAIpS,EAAM6L,OACD,cAAC,GAAD,CAAmB7L,MAAOA,IAG/B6Z,EAAelF,EACV,cAAC,GAAD,CAAiB3U,MAAOA,IAI/B,eAACia,GAAD,WACE,eAACC,GAAD,WACE,cAAC,GAAD,CACEjM,OAAO,OACPzE,KAAM,cAAC,KAAD,CAAuB7I,GAAG,MAAMH,MAAM,OAAOO,MAAM,cACzD6C,MAAO9E,EAAE,QACT0H,MAAOxG,EAAMwG,MACbqO,YAAaF,IAEf,cAAC,GAAD,CAAe7T,QAAQ,OAAOgO,MAAM,KAAK8F,WAAYpH,EAAWE,SAAUiH,IAC1E,eAAC,IAAD,CAAUrN,EAAE,OAAZ,UACE,cAAC,GAAD,CACEvB,YAAa/F,EAAM6F,WACnBgN,UAAWA,EACX7M,WAAYqH,EACZrC,WAAYkK,EACZtE,SAAU0J,IAEZ,eAAC,GAAD,CAAgBtQ,YAAasQ,EAASrU,IAAYC,KAAOD,IAAYiF,KAArE,UACE,cAAC,KAAD,CAAMnK,MAAM,aAAa4G,SAAS,OAAO0C,MAAI,EAACR,cAAc,YAAY9F,GAAG,MAA3E,SACGjF,EAAE,gBAEL,cAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,OAAOtB,OAAO,OAA1E,SACG+S,GACC,qCACE,qBAAKxW,IAAKmT,EAAV,SACE,cAAC,KAAD,CAAM9H,MAAI,EAACtJ,MAAOwZ,EAAY5S,SAAS,OAAOlH,MAAO,CAAEga,UAAW,QAAlE,SACGnW,GAAUkR,EAAO8B,eAGtB,cAAC,GAAD,CAAatN,YAAasQ,EAASrU,IAAYC,KAAOD,IAAYiF,KAAlE,SACG5G,GAAUsH,UAKlBjB,GAAa,cAAC,GAAD,CAAcA,UAAWA,IACvC,cAAC,GAAD,CAAc5E,YAAaA,OAE7B,cAAC,GAAD,CACEA,YAAa/F,EAAM8F,WACnB+M,UAAWA,EACX7M,WAAYsH,EACZtD,YAAa/D,IAAYiF,KACzBF,WAAYmK,EACZvE,UAAW0J,UAIhBlI,GAAkBC,MCjHnBqI,GAAQjd,IAAOC,IAAV,uPAgBLid,GAAOld,YAAOid,GAAPjd,CAAH,6DAIJmd,GAAQnd,IAAOC,IAAV,4OAGY,qBAAGmd,UAA6B,IAAM,IAIzDH,IACW,qBAAGG,UAA6B,EAAI,KAG/CF,IACW,qBAAGE,UAA6B,GAAK,KAI9CC,GAAiBrd,IAAOC,IAAV,wEA0BLqd,GAb2B,SAAC,GAAqC,IAAnCF,EAAkC,EAAlCA,UAAWpY,EAAuB,EAAvBA,OACtD,EAToB,SAACrB,GACrB,GAAwB,IAApBA,EAASnB,OACX,MAAM,IAAImW,MAAM,uCAGlB,OAAOhV,EAIe4Z,CADuD,EAAf5Z,UAC9D,mBAAO6Z,EAAP,KAAcC,EAAd,KAEA,OACE,cAACJ,GAAD,CAAgBra,MAAO,CAAEgC,UAAzB,SACE,eAACmY,GAAD,CAAOC,UAAWA,EAAlB,UACE,cAACH,GAAD,UAAQO,IACR,cAACN,GAAD,UAAOO,U,iDCpDAC,GAVG,WAChB,IAAMC,EAAgBC,qBAAWra,GAEjC,QAAsBE,IAAlBka,EACF,MAAM,IAAIhF,MAAM,oBAGlB,OAAOgF,GCHME,GAJC7d,YAAO2L,KAAMwE,MAAM,CAAEpG,WAAY,UAAjC/J,CAAH,0CCqCP8d,GAAO,IAAIC,KAAU,KAAM5T,MAAM6T,MACjCC,GAAmB,CAAC,GAAI,GAAI,GAAI,IA6NvBC,GAhMyC,SAAC,GAAqD,IA3BnFC,EA2BgC7b,EAAkD,EAAlDA,SAAU8b,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,OAAQpV,EAAgB,EAAhBA,UAC3F,EAA0B/H,mBAAS,IAAnC,mBAAO6C,EAAP,KAAcua,EAAd,KACA,EAAsCpd,oBAAS,GAA/C,mBAAOqd,EAAP,KAAoBC,EAApB,KACA,EAAwCtd,mBAAS,MAAjD,mBAAOud,EAAP,KAAqBC,EAArB,KACQtf,EAAYC,cAAZD,QACAwE,EAAW8Z,KAAX9Z,OACS+a,EAAeC,eAAxBC,QACFC,EAAeC,cACb1d,EAAMC,cAAND,EACAiI,EAAeF,eAAfE,WACFC,EAAsBC,eAEtBwV,EAAiBtY,GAAaiY,GAAYvU,WAC1C6U,EAAavY,GAAaiY,EAAWO,GAAGpB,IAAQa,EAAWQ,MAAMrB,IAAQa,GAAYvU,WACrFgV,EAAY,IAAIrB,KAAUha,GAE1Bsb,EAAyBD,EAAUnf,IAAIgf,GAAY9U,MAAM,KAAKC,WAC9DkV,GA5CmBnB,EA4CmBkB,EA3CxCrF,OAAOuF,MAAMpB,IAIbA,EAAa,KAIbA,EAAa,EAPR,GAWH,GAAN,OAAUA,EAAWjX,oBAAezD,EAAW,CAAE2D,sBAAuB,IAAxE,MAgCMoY,EAAmBpgB,GAAWggB,EAAUF,GAAG,IAAuB,OAAjBT,EACjDgB,EAAsB/Y,GAAaoY,GAAc1U,WAkCvD,EAhEqB,SAACrG,EAAkB4a,EAAuBc,GAC/D,OAAId,EAAWe,GAAG,GACT,CAAE3Z,GAAI,IAAKkP,SAAU,2BAA4BzJ,UAAU,GAGhEzH,EAAM2b,GAAG,IAAM3b,EAAMwb,QAChB,CAAExZ,GAAI,IAAKkP,SAAU,kBAAmBzJ,UAAU,GAEpD,CAAEzF,GAAI,IAAKkP,SAAU,UAAWzJ,SAAUzH,EAAM4b,GAAGF,IAwD3BG,CAAeR,EAAWT,EAAYc,GAA7DxK,EAAR,EAAQA,SAAUzJ,EAAlB,EAAkBA,SAyClB,OAhBAlM,qBAAU,WACR,IAAMugB,EAAU,IAAI9B,KAAUha,GACD8b,EAAQX,GAAG,IAAMW,EAAQC,IAAIb,GAI/CY,EAAQX,GAAG,IAAMW,EAAQF,GAAGF,GACrCf,EAAgB,CACdzJ,SAAU,gDACV6D,KAAM,CAAExR,IAAKmY,EAAqBM,MAAO,SAG3CrB,EAAgB,MAPhBA,EAAgB,CAAE3Y,GAAI,IAAKkP,SAAU,+BAStC,CAAClR,EAAOkb,EAAYQ,EAAqBf,IAG1C,eAAC,GAAD,CAAMsB,YAtDgB,WACtBpc,EAAOqc,SAASC,UAChBtc,EAAOuc,WAAWD,UAClBtc,EAAOwc,gBAmD6BC,WAhDf,WACrBzc,EAAOqc,SAASK,SAChB1c,EAAOuc,WAAWG,SAClB1c,EAAO2c,gBA6CP,UACE,cAAC,IAAD,CAAY1W,EAAE,OAAd,SACE,eAAC,IAAD,CAAME,WAAW,SAAjB,UACE,cAAC,IAAD,CAAY1G,QAAQ,OAAOgO,MAAM,KAAKlO,QA/DzB,WACnBmb,EAAS,IACTD,KA6DmEnb,GAAG,MAAhE,SACE,cAAC,IAAD,CAAeH,MAAM,WAEvB,cAAC,GAAD,UACE,cAAC,IAAD,CAASwP,KAAK,KAAd,SAAoBlR,EAAE,oBAExB,cAAC,GAAD,CAAakL,YAAajK,EAAUa,QAASib,EAA7C,SACG9b,IAAakG,IAAYC,KAAOpH,EAAE,MAAQA,EAAE,eAInD,eAAC,IAAD,CAAU4K,GAAG,OAAb,UACE,eAAC,IAAD,CAAMlC,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,MAA5D,UACE,eAAC,KAAD,CAAM2D,UAAU,QAAQ3G,MAAM,aAA9B,UACGjC,EAAE,UADL,OAGA,eAAC,IAAD,CAAM0I,WAAW,SAAjB,UACE,cAAC,IAAD,CAAa7G,GAAG,UAChB,cAAC,KAAD,CAAM0J,MAAI,EAACR,cAAc,YAAzB,uBAKJ,cAAC,IAAD,CACErI,MAAOA,EACP0O,SAtGmD,SAACoG,GAC1D,IAAM2H,EAAW3H,EAAI4H,OAAO1c,MAC5Bua,EAASkC,IAqGHE,UAAWlB,EACXmB,WAAY,CAAEnV,UAAWpM,GAAWmf,KAErCiB,GACC,cAAC,KAAD,CAAMlc,MAAM,UAAU4G,SAAS,OAAON,GAAG,MAAMK,UAAU,QAAzD,SACG5I,EAAEod,EAAaxJ,SAAUwJ,EAAa3F,QAG3C,cAAC,KAAD,CAAM7O,UAAU,QAAQ3D,GAAG,OAAOhD,MAAM,aAAa4G,SAAS,OAAOlH,MAAO,CAAEgC,OAAQ,QAAtF,SACG5F,GAAWiC,EAAE,YAAD,OAAa2d,GAAkB,CAAE1X,IAAK0X,MAErD,cAAC,KAAD,CACE4B,KAAK,UACLC,IAAK,EACLC,IAAK7B,EACLlb,MAAOqb,EAAUU,IAAIb,GAAcG,EAAUhV,WAAa,EAC1D2W,eAlHmB,SAACP,GAC1BlC,EAASkC,EAASjZ,aAkHZyZ,KAAM,MACNC,WAAY7hB,EAAUkgB,EAAoB,GAC1C9T,UAAWpM,GAAWmf,EACtBjY,GAAG,QAEL,eAAC,IAAD,CAAMyD,WAAW,SAASC,eAAe,gBAAgB1D,GAAG,OAA5D,UACG2X,GAAiBhL,KAAI,SAACiO,GAKrB,OACE,cAAC,IAAD,CAEE7P,MAAM,KACNhO,QAAQ,WACRF,QATgB,WAClBmb,GAAW4C,EAAU,IAAOjC,GAAY1X,aAStCiE,UAAWpM,GAAWmf,EACtBvb,MAAO,CAAEC,KAAM,GANjB,mBAQMie,EARN,MACOA,MAWX,cAAC,IAAD,CAAQ7P,MAAM,KAAKhO,QAAQ,WAAWF,QAvI/B,WACbmb,EAASW,EAAW1X,aAsIyCiE,UAAWpM,GAAWmf,EAA7E,SACGld,EAAE,YAGP,cAAC,IAAD,CAAKiF,GAAG,MAAR,SACGlH,EACC,cAAC,IAAD,CACE2D,MAAM,OACNyI,UAAWpM,GAAWoM,EACtBrI,QAvHgB,WAC1B,IAAMge,EAAY7e,IAAakG,IAAYC,KAAO,UAAY,UACxD2Y,EAAeC,aAAiBjC,GAEtC7V,EAAoBc,QAAQ8W,KACzB5W,KAAK,CAAEC,KAAMpL,EAAS2E,MAAOqd,IAC7B3W,KAAK,WAAW,WACf+T,GAAe,MAEhB/T,KAAK,UALR,uCAKmB,WAAOC,GAAP,SAAAjL,EAAA,sDACf+e,GAAe,GACfvV,EAAUmY,EAAc1W,EAAOC,iBAFhB,2CALnB,uDASGF,KAAK,SAAS,SAACI,GACd,IAAMyW,EAAWjgB,EAAE,oDAEnBiI,EAAW,SAAD,OAAWuB,QAAX,IAAWA,OAAX,EAAWA,EAAOC,SAC5B0T,GAAe,GACfzT,QAAQF,MAAMyW,EAAUzW,OAsGlBG,UAAWuT,EACXtT,QAASsT,EAAc,cAAC,IAAD,CAAejb,MAAM,eAAe4H,MAAI,IAAM,KALvE,SAOG7J,EAAE4T,KAGL,cAACsM,GAAA,EAAD,CAAcxe,MAAM,WAGxB,cAAC,KAAD,CAAMyD,GAAG,IAAI0D,SAAS,OAAO8C,WAAY,EAAG1J,MAAM,aAAlD,SACGjC,EAAE,mFC5DEmgB,GAnKqC,SAAC,GAO9C,IANLjf,EAMI,EANJA,MACA6S,EAKI,EALJA,UACAqC,EAII,EAJJA,aACAC,EAGI,EAHJA,eACA9H,EAEI,EAFJA,eACAC,EACI,EADJA,eAEA,EAA0B3O,mBAAgB,CACxCugB,mBAAmB,EACnBnf,SAAUkG,IAAYC,OAFxB,mBAAOiO,EAAP,KAAcC,EAAd,KAIQtV,EAAMC,cAAND,EACF6D,EAAW0X,cACTvT,EAAiBD,eAAjBC,aACAjK,EAAYC,cAAZD,QACFF,EAAWC,cACTid,EAAiBD,cAAjBC,aACAqF,EAAgC/K,EAAhC+K,kBAAmBnf,EAAaoU,EAAbpU,SACrBof,EAAgBtF,GAAgB7Z,EAAM4U,WAAajS,EACnDyc,EAAkBrf,IAAakG,IAAYC,KAAO,KAAO,OAC/D,EAA+C8L,aAC7C,qBAAKvR,MAAO,CAAEwR,WAAY,UAA1B,mBAA0CxN,GAAUoO,GAApD,UACA,CAAEX,UAAW,QAFPC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,eAAgBC,EAAnC,EAAmCA,QAO7BgN,EAAqBrf,EAAM4U,WAAajS,EAcxC2c,GAXApK,IAAgBC,GAII,OAApBnV,EAAM2K,UASN4U,EAAa,kBACjBnL,GAAS,SAACoL,GAAD,mBAAC,eACLA,GADI,IAEPN,mBAAmB,QAGjBO,EAAoB,SAACC,GACzBtL,GAAS,SAACoL,GAAD,mBAAC,eACLA,GADI,IAEPN,mBAAmB,EACnBnf,SAAU2f,QAWR7S,EAAa,uCAAG,WAAOgS,EAAyBc,GAAhC,SAAAziB,EAAA,sDAEpBP,EACEijB,YAAsB,CACpB/iB,UACAqX,QAASlU,EAAMwD,GACfqc,WAAY,CACVF,OACA5f,WACA4F,OAAQxB,GAAa0a,GAAchX,eAKzC0X,IAEAzY,EACE,WACAhI,EAAE,GAAD,OAAIsgB,EAAJ,qBAAwC,CACvCrf,SAAUqf,KAnBM,2CAAH,wDA4BnB,OACE,eAAC,GAAD,CAAUvE,UAAWqE,EAAmBzc,OAAO,QAA/C,UACE,eAAC,GAAD,WACE,cAAC,GAAD,CACEwL,OAAO,OACPzH,MAAOxG,EAAMwG,MACbqO,YAAawK,EACb7V,KAAM,cAAC,KAAD,CAAuBzI,MAAM,QAAQJ,GAAG,MAAMH,MAAM,SAC1DoD,MAAO9E,EAAE,UAEX,eAAC,IAAD,CAAUwI,EAAE,OAAZ,UACE,cAAC,GAAD,CACEvB,YAAa/F,EAAM6F,WACnBgN,UAAWA,EACX7M,WAAYqH,EACZrC,WAAYkK,IAEd,cAAC,GAAD,CAAgBpK,OAAQwU,EAAkBvU,QAASuU,EAAnD,SACGA,EACC,qCACE,cAAC,GAAD,CAAcvZ,YAAa/F,EAAM+F,YAAahC,GAAG,QACjD,cAAC,IAAD,CACEjD,QAAQ,UACRN,MAAM,OACNI,QAAS,kBAAM6e,EAAkBxZ,IAAYC,OAC7CnC,GAAG,MACHkF,UAAWqW,GAAoBH,EALjC,SAOGrgB,EAAE,cAEL,cAAC,IAAD,CACEgC,QAAQ,SACRN,MAAM,OACNI,QAAS,kBAAM6e,EAAkBxZ,IAAYiF,OAC7CjC,UAAWqW,GAAoBH,EAJjC,SAMGrgB,EAAE,mBAIP,qCACE,qBAAKE,IAAKmT,EAAV,SACE,cAAC,IAAD,CAAQlJ,UAAQ,EAACM,UA7CxBxJ,IAAakG,IAAYC,KAAO,cAAC,IAAD,CAAanF,MAAM,iBAAoB,cAAC,IAAD,CAAeA,MAAM,iBA6C/BP,MAAM,OAAOuD,GAAG,MAAtE,SACGjF,EAAE,qBAAsB,CAAEiB,SAAUqf,QAGzC,cAAC,GAAD,CAAcrZ,YAAa/F,EAAM+F,cAChCqM,GAAkBC,OAIzB,cAAC,GAAD,CACEtM,YAAa/F,EAAM8F,WACnB+M,UAAWA,EACX7M,WAAYsH,EACZtD,YAAa/D,IAAYiF,KACzBF,WAAYmK,UAIlB,cAAC,GAAD,CACE2G,OAAQyD,EACR7Y,UAAWmG,EACX9M,SAAUA,EACV8b,eAnGiB,WACrBzH,GAAS,SAACoL,GAAD,mBAAC,eACLA,GADI,IAEPzf,SAAUyf,EAAUzf,WAAakG,IAAYC,KAAOD,IAAYiF,KAAOjF,IAAYC,iB,SC/C1E4Z,GAvCW,SAACjL,GACzB,IAAM7X,EAAQiC,iBAAsC,MACpD,EAAgDN,mBAAS,GAAzD,mBAAOohB,EAAP,KAAyBC,EAAzB,KAkCA,OAhCAjjB,qBAAU,WA2BR,OA1BoB,uCAAG,8BAAAG,EAAA,6DACf+iB,EAAOC,eADQ,SAEMD,EAAKE,IAAIC,iBAFf,OAEfvG,EAFe,OAIjBhF,EAAcgF,IAChBmG,GAAqBnL,EAAcgF,GAAgBwG,MAG/CrjB,EAAMsC,SACR/B,cAAcP,EAAMsC,SAGtBtC,EAAMsC,QAAUrC,aAAY,WAC1B+iB,GAAoB,SAACM,GAKnB,OAJ6B,IAAzBA,GACF/iB,cAAcP,EAAMsC,SAGfghB,EAAuB,OAE/B,MApBgB,2CAAH,oDAwBpBC,GAEO,WACLhjB,cAAcP,EAAMsC,YAErB,CAAC0gB,EAAqBnL,EAAa7X,IAE/B+iB,GC5BMS,GATW,WAAyB,IAAxBC,EAAuB,uDAAN,EACpC9d,EAAW0X,cACXqG,EAAuBC,cACvBC,EAAcH,EAAiB9d,EAC/B4C,EAAUua,GAAkBY,EAAuBE,GAEzD,OAAOrb,GCqCMsb,GAjCqC,SAAC,GAAe,IAAb7gB,EAAY,EAAZA,MAC7ClB,EAAMC,cAAND,EACF6D,EAAW+R,cACX3G,EAAeC,cACf2G,EAAoB3U,EAAM4U,WAAajS,EACvC4C,EAAUib,GAAkBxgB,EAAMwG,MAAQuH,EAAe,GACzD+S,EAAY5b,GAAgBK,GAElC,OACE,eAAC,GAAD,WACE,cAAC,GAAD,CACE0I,OAAO,OACPzE,KAAM,cAAC,KAAD,CAAU7I,GAAG,MAAMH,MAAM,SAC/BoD,MAAO9E,EAAE,SACT0H,MAAOxG,EAAMwG,MACbqO,YAAaF,IAEf,eAAC,IAAD,CAAUrN,EAAE,OAAZ,UACE,cAAC,GAAD,CAAiBqL,YAAU,IAC3B,cAAC,GAAD,UACE,eAAC,KAAD,CAAMjL,UAAU,SAAhB,UACE,cAAC,KAAD,CAAM2C,MAAI,EAAV,SAAYvL,EAAE,kBACd,cAAC,KAAD,CAAM6I,SAAS,OAAO0C,MAAI,EAA1B,oBACOyW,UAIX,cAAC,GAAD,CAAiB9W,YAAa/D,IAAYiF,KAAMyH,YAAU,WCsCnDoO,GAjE6B,SAAC,GAAe,IAAb/gB,EAAY,EAAZA,MACrCwD,EAA0ExD,EAA1EwD,GAAIgD,EAAsExG,EAAtEwG,MAAOmE,EAA+D3K,EAA/D2K,UAAWe,EAAoD1L,EAApD0L,WAAY3F,EAAwC/F,EAAxC+F,YAAaF,EAA2B7F,EAA3B6F,WAAYC,EAAe9F,EAAf8F,WAC7DiI,EAAeC,cACbnR,EAAYC,cAAZD,QACFF,EAAWC,cACXkD,EAAMkhB,YAAmBnkB,EAAS2G,GAClCwH,EAAqB,OAARlL,EACboV,EAAelK,GAAclL,EAAIC,WAAakG,IAAYC,KAC1DiP,EAAiBnK,GAAclL,EAAIC,WAAakG,IAAYiF,KAC5DmC,EAAiB5H,GAAcM,EAAaF,GAC5CyH,EAAiB7H,GAAcM,EAAaD,GAUlD,OAPA/I,qBAAU,WACJF,GACFF,EAASskB,YAAc,CAAEpkB,UAASqX,QAAS1Q,OAE5C,CAAC3G,EAAS2G,EAAI7G,IAGb6J,IAAUuH,GAA8B,OAAdpD,EAE1B,cAAC,GAAD,CACE3K,MAAOA,EACPmV,eAAgBA,EAChBD,aAAcA,EACdrC,UAAS,OAAE/S,QAAF,IAAEA,OAAF,EAAEA,EAAK6F,OAChB0H,eAAgBA,EAChBC,eAAgBA,IAMH,OAAf5B,GAAuBlF,IAAUuH,EAAe,EAEhD,cAAC,GAAD,CACE8E,UAAS,OAAE/S,QAAF,IAAEA,OAAF,EAAEA,EAAK6F,OAChBwP,eAAgBA,EAChBD,aAAcA,EACdlV,MAAOA,EACPqN,eAAgBA,EAChBC,eAAgBA,IAMlB9G,EAAQuH,EACH,cAAC,GAAD,CAAe/N,MAAOA,IAK7B,cAAC,GAAD,CACEA,MAAOA,EACPmV,eAAgBA,EAChBD,aAAcA,EACdrC,UAAS,OAAE/S,QAAF,IAAEA,OAAF,EAAEA,EAAK6F,OAChB0H,eAAgBA,EAChBC,eAAgBA,KCpEhB4T,GAAQzjB,YAAOoN,IAAPpN,CAAH,0QAWP,qBAAGE,MAAkBW,aAAa6iB,MAUhCC,GAAQ3jB,YAAO4jB,KAAP5jB,CAAH,sIAIP,qBAAGE,MAAkBW,aAAa6iB,MAMhCG,GAAQ7jB,YAAO4jB,KAAP5jB,CAAH,gIAKP,qBAAGE,MAAkBW,aAAa6iB,MAKhCI,GAAW9jB,YAAO4jB,KAAP5jB,CAAH,uFACV,qBAAGE,MAAkBW,aAAa6iB,MAMhCK,GAAQ/jB,YAAO8V,IAAP9V,CAAH,+QACM,kBAAsB,UAAtB,EAAGgkB,IAA6B,WAAa,gBAC3C,kBAAsB,UAAtB,EAAGA,IAA6B,mBAAqB,sBAI3D,kBAAsB,UAAtB,EAAGA,IAA6B,eAAiB,kBAE1D,qBAAG9jB,MAAkBW,aAAa6iB,MAIvB,kBAAsB,UAAtB,EAAGM,IAA6B,mBAAqB,sBAIvDC,GAA2B,WACtC,IAAQlM,EAAWgE,KAAXhE,OACA8B,GAAR,OAAsB9B,QAAtB,IAAsBA,IAAU,IAAxB8B,UAER,OACE,eAAC,IAAD,CAAKqK,GAAG,OAAO5hB,SAAS,WAAW6hB,QAAQ,eAA3C,UACE,cAACV,GAAD,CAAO5N,KAAM,EAAb,SACE,cAAC,IAAD,MAEF,eAACkO,GAAD,CAAOC,IAAI,OAAX,UACE,cAACL,GAAD,CAAO/W,MAAI,EAACR,cAAc,YAA1B,qBAGA,cAACyX,GAAD,CAAO3Z,SAAS,OAAhB,SACG2P,GAAS,WACJA,EAAU3S,oBAAezD,EAAW,CAAE0D,sBAAuB,EAAGC,sBAAuB,cAW1Fgd,GAAwC,SAAC,GAAkB,IAAhBlf,EAAe,EAAfA,SAChD4C,EAAUib,KACVM,EAAY5b,GAAgBK,GAC1BzG,EAAMC,cAAND,EAER,OACE,eAAC,IAAD,CAAKgjB,GAAG,OAAO/hB,SAAS,WAAxB,UACE,eAACyhB,GAAD,CAAOC,IAAI,QAAX,UACE,cAACL,GAAD,CAAO/W,MAAI,EAACtJ,MAAM,YAAlB,SACe,IAAZwE,EAAgBzG,EAAE,WAAagiB,IAElC,cAACS,GAAD,CAAU5Z,SAAS,OAAnB,SAA2BhF,OAE7B,cAACue,GAAD,CAAO9N,MAAO,EAAd,SACE,cAAC,KAAD,UC1GF2O,GAAoBtkB,YAAO8V,IAAP9V,CAAH,6MAQnB,qBAAGE,MAAkBW,aAAa6iB,MAKhCa,GAAOvkB,IAAOC,IAAV,8GA0CKukB,GAnCK,WAClB,IAAQ5gB,EAAW8Z,KAAX9Z,OACF0M,EAAeC,cACfkU,EAASC,cAiBf,OACE,eAACJ,GAAD,WACE,cAAC,IAAD,CAAYjhB,QAAQ,OAAOgO,MAAM,KAAKlO,QAjBlB,WACtBS,EAAO+gB,aAgBL,SACE,cAAC,IAAD,CAAerhB,MAAM,UAAUP,MAAM,WAEvC,cAACwhB,GAAD,CAAMphB,QAZgB,WACxB,IAAMyhB,EAAoBH,EAAOI,WAAU,SAACtiB,GAAD,OAAWA,EAAMwG,QAAUuH,KAEtE1M,EAAOkhB,QAAQF,EAAoB,GACnChhB,EAAOmhB,UAQL,SACE,cAAC,IAAD,CAAgBhiB,MAAM,WAExB,cAAC,IAAD,CAAYM,QAAQ,OAAOgO,MAAM,KAAKlO,QAnBlB,WACtBS,EAAOohB,aAkBL,SACE,cAAC,IAAD,CAAkB1hB,MAAM,UAAUP,MAAM,eChCjCkiB,GAhBO,WACpB,IAAMhT,EAAoBC,cACpBhT,EAAWC,cACTC,EAAYC,cAAZD,QAMR,OACE,cAAC,IAAD,CAAYiE,QAAQ,SAASgJ,GAAG,MAAMlJ,QALpB,WAClBjE,EAASkE,aAAoB,KAI+B4H,UAAWiH,EAAmBzG,UAAWpM,EAArG,SACG6S,EAAoB,cAAC,IAAD,CAAe/G,MAAI,EAAC5H,MAAM,UAAa,cAAC,IAAD,CAAaP,MAAM,OAAOO,MAAM,aCV5F4hB,GAASllB,IAAOC,IAAV,gGAIR,qBAAGC,MAAkBW,aAAa6iB,MAKhCyB,GAAoBnlB,IAAOC,IAAV,wHAInB,qBAAGC,MAAkBW,aAAa6iB,MAMhC0B,GAAoBplB,IAAOC,IAAV,0EAGnB,qBAAGC,MAAkBW,aAAa6iB,MAKhC2B,GAAuBrlB,IAAOC,IAAV,oGAItB,qBAAGC,MAAkBW,aAAa6iB,MAuCvB4B,GAlCF,WACX,OACE,eAAC,GAAD,CAASvb,WAAW,SAASF,EAAE,OAA/B,UACE,cAACqb,GAAD,UACE,cAAC,GAAD,MAEF,cAAC,GAAD,CAASlb,eAAe,SAAxB,SACE,cAAC,GAAD,MAEF,cAACkb,GAAD,UACE,eAAC,IAAD,CAAMnb,WAAW,SAASC,eAAe,WAAzC,UACE,cAACob,GAAD,UACE,cAAC,GAAD,CAAYlgB,SAAS,SAEvB,cAACigB,GAAD,UACE,cAAC,IAAD,CACE9hB,QAAQ,SACRmD,GAAG,IACHoE,KAAK,uDACL6V,OAAO,SACP8E,IAAI,sBALN,SAOE,cAAC,IAAD,CAAUxiB,MAAM,OAAOO,MAAM,cAGjC,cAAC+hB,GAAD,UACE,cAAC,GAAD,e,UC9CGG,GAlBQ,WACrB,IAAMlV,EAAeC,cACfkU,EAASC,cACTe,EAAgBC,aAAiBpV,GAC/B1M,EAAW8Z,KAAX9Z,OACF1E,EAAWC,cAEjBG,qBAAU,WACR,GAAIsE,QAA2BH,IAAjB6M,QAAgD7M,IAAlBgiB,GAA+BnV,IAAiBmV,EAAe,CACzG,IAAMb,EAAoBH,EAAOI,WAAU,SAACtiB,GAAD,OAAWA,EAAMwG,QAAUuH,KAGtE1M,EAAOkhB,QAAQF,EAAoB,GACnChhB,EAAOmhB,YAER,CAACU,EAAenV,EAAcmU,EAAQ7gB,EAAQ1E,KCTnDymB,KAAWC,IAAI,CAACC,KAAUC,OAE1B,I,uCCHKC,GDGCC,GAAehmB,IAAOC,IAAV,mJA4CHgmB,GAlCa,WAC1B,IAAQpiB,EAAc6Z,KAAd7Z,UACF4gB,EAASC,cACTwB,EAAeC,KAAKC,MAAM3B,EAAOjiB,OAAS,GAIhD,OAFAgjB,KAGE,eAAC,IAAD,CAAKa,UAAU,SAASC,UAAU,OAAlC,UACE,cAAC,GAAD,IACA,cAACN,GAAD,UACE,cAAC,KAAD,CACEO,aAAcL,EACdM,SAAU3iB,EACV4iB,aAAc,GACdC,cAAc,OACdC,UAAQ,EACRC,gBAAc,EACdC,gBAAc,EACd1G,YAAU,EACVF,UAAQ,EACR6G,gBAAc,EAVhB,SAYGrC,EAAOxR,KAAI,SAAC1Q,GAAD,OACV,cAAC,KAAD,UACE,cAAC,GAAD,CAAWA,MAAOA,KADFA,EAAMwD,eEnC9BghB,GAAgB/mB,IAAOC,IAAV,0GAOb+mB,GAAchnB,IAAOC,IAAV,yHAIN,qBAAG0B,kBAA6C,QAAU,KAG/DslB,GAAYjnB,IAAOC,IAAV,qEACH,qBAAGinB,gBAAyC,OAAS,KAI3DC,GAAoBnnB,YAAOonB,IAAPpnB,CAAH,uaACD,qBAAGE,MAAkB2N,KAAKC,cAGrC,qBAAG5N,MAAkBC,OAAOknB,QAQf,qBAAGnnB,MAAkB2N,KAAKC,cAI9C,qBAAG5N,MAAkBW,aAAa6iB,MAKhC4D,GAAiBtnB,IAAOC,IAAV,2KAUdsnB,GAAgBvnB,IAAOC,IAAV,uGAGf,qBAAGC,MAAkBW,aAAa6iB,MAgDvB8D,GA1CW,WACxB,IAAM7lB,EAAoBC,cACpBslB,EAAkBO,cAClBvoB,EAAWC,cACTkC,EAAMC,cAAND,EACFmP,EAAS9O,cAMf,OACE,eAAC6lB,GAAD,WACE,eAACD,GAAD,WACG9W,IAAWW,IAAiBuW,OAAS,cAAC,GAAD,IACrClX,IAAWW,IAAiBwW,QAAU,cAAC,GAAD,IACtCnX,IAAWW,IAAiBrB,MAC3B,qCACE,cAACiX,GAAD,UACE,cAAC,GAAD,MAEF,eAACE,GAAD,CAAWC,gBAAiBA,EAA5B,UACE,cAACC,GAAD,CACE9jB,QAAQ,WACRgO,MAAM,KACNvF,UAAWob,EAAkB,cAAC,IAAD,IAAoB,cAAC,IAAD,IACjD/jB,QAnBU,WACtBjE,EAAS0oB,aAAmBV,KAclB,SAMqB7lB,EAAlB6lB,EAAoB,QAAa,YAEpC,cAAC,GAAD,aAKR,cAACF,GAAD,CAAarlB,kBAAmBA,EAAhC,SACE,cAAC,GAAD,UCzFFkmB,GAAY7nB,IAAOC,IAAV,6CAIT6nB,GAAS9nB,IAAOC,IAAV,iEAKN8nB,GAAmB/nB,IAAOC,IAAV,sKAEA,qBAAGC,MAAkB2N,KAAKC,cAK5C,qBAAG5N,MAAkBW,aAAa6iB,MAuEvBsE,GAtDI,WACjB,IAAQpkB,EAAW8Z,KAAX9Z,OACFqkB,EAAgBrmB,cAChBsmB,EAAcT,cACdjX,EAAS9O,cACTymB,EAjBe,SAACF,EAAwBC,GAC9C,OAAID,EACK,EAGLC,EACK,EAGF,EAQaE,CAAeH,EAAeC,GAC5ChpB,EAAWC,cACTC,EAAYC,cAAZD,QAkBR,OACE,eAAC2oB,GAAD,WACE,cAACF,GAAD,UACE,cAAC,IAAD,CAAYxkB,QAAQ,OAAOF,QAAS,kBAAMS,EAAO+gB,aAAanZ,SAAUgF,IAAWW,IAAiBrB,KAApG,SACE,cAAC,IAAD,CAAe/M,MAAM,OAAOO,MAAM,gBAGtC,cAACwkB,GAAD,UACE,eAAC,IAAD,CAAYK,YAAaA,EAAa9W,MAAM,KAAKhO,QAAQ,SAASglB,YAxBhD,SAACC,GACvB,OAAQA,GACN,KAAK,EACHppB,EAASkE,aAAoB,IAC7B,MACF,KAAK,EACHlE,EAAS0oB,aAAkB,IAC3B1oB,EAASkE,aAAoB,IAC7B,MACF,KAAK,EACL,QACElE,EAASkE,aAAoB,IAC7BlE,EAAS0oB,aAAkB,MAY3B,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOtkB,MAAM,mBAEf,cAAC,IAAD,UACE,cAAC,IAAD,CAAWA,MAAM,mBAEnB,cAAC,IAAD,CAAgBkI,UAAWpM,EAA3B,SACE,cAAC,IAAD,CAAakE,MAAM,wBAIzB,cAACukB,GAAD,UACE,cAAC,IAAD,CAAYxkB,QAAQ,OAAOF,QAAS,kBAAMS,EAAOohB,aAAaxZ,SAAUgF,IAAWW,IAAiBrB,KAApG,SACE,cAAC,IAAD,CAAkB/M,MAAM,OAAOO,MAAM,oBC7FzCilB,GAAcvoB,IAAOC,IAAV,6CAIXuoB,GAAexoB,IAAOC,IAAV,2DAkBHwoB,GAbD,WACZ,OACE,eAAC,IAAD,CAAMpR,cAAc,SAASrS,OAAO,OAApC,UACE,cAACujB,GAAD,UACE,cAAC,GAAD,MAEF,cAACC,GAAD,UACE,cAAC,GAAD,W,SHXHzC,K,sBAAAA,E,kBAAAA,E,eAAAA,Q,KAML,I,GAAM2C,GAAe1oB,IAAOC,IAAV,qJAMd,qBAAGC,MAAkBW,aAAa6iB,MAKhCiF,GAAO3oB,IAAOC,IAAV,iIAMM,qBAAG2oB,UAA6B,UAAY,YA2C7CC,GA5BU,WACvB,IAEMC,EAfQ,SAACnnB,EAA4BulB,GAC3C,OAAIvlB,EACKokB,GAASgD,QAGd7B,EACKnB,GAASiD,MAGXjD,GAASkD,UAMHC,CAFatnB,cACF6lB,eAElBjX,EAAS9O,cAEf,OACE,eAACgnB,GAAD,WACE,eAAC,IAAD,CAAK1jB,OAAO,OAAOa,SAAS,SAASvD,SAAS,WAA9C,UACE,cAACqmB,GAAD,CAAMC,UAAWE,IAAS/C,GAASkD,UAAnC,SACE,eAAC,IAAD,CAAMlf,WAAW,SAAS/E,OAAO,OAAjC,UACGwL,IAAWW,IAAiBuW,OAAS,cAAC,GAAD,IACrClX,IAAWW,IAAiBwW,QAAU,cAAC,GAAD,IACtCnX,IAAWW,IAAiBrB,MAAQ,cAAC,GAAD,SAGzC,cAAC6Y,GAAD,CAAMC,UAAWE,IAAS/C,GAASiD,MAAnC,SACE,cAAC,GAAD,MAEF,cAACL,GAAD,CAAMC,UAAWE,IAAS/C,GAASgD,QAAnC,SACE,cAAC,GAAD,SAGJ,cAAC,GAAD,QInDAI,GAAsBnpB,YAAOopB,KAAPppB,CAAH,iGACT,qBAAGE,MAAkBC,OAAOC,UAAUipB,aAuEvCC,GAlEuC,SAAC,GAA8B,IAA5BrgB,EAA2B,EAA3BA,UAAWD,EAAgB,EAAhBA,UAClE,EAA8C9H,oBAAS,GAAvD,mBAAOqoB,EAAP,KAAwBC,EAAxB,KACA,EAA8CtoB,oBAAS,GAAvD,mBAAOuoB,EAAP,KAAwBC,EAAxB,KACQroB,EAAMC,cAAND,EAeR,OACE,eAAC,KAAD,CAAgB8E,MAAO9E,EAAE,YAAasI,SAAS,QAA/C,UACE,cAACwf,GAAD,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAS5W,KAAK,KAAd,SAAoBlR,EAAE,kBAG1B,eAAC,KAAD,CAAWwI,EAAE,OAAO8f,SAAS,QAA7B,UACE,eAAC,IAAD,CAAKC,UAAU,QAAQtD,UAAU,OAAjC,UACE,cAAC,IAAD,CAAS9f,GAAG,KAAKF,GAAG,OAApB,SACGjF,EAAE,8BAGL,cAAC,KAAD,CAAMmF,GAAG,IAAIlD,MAAM,aAAagD,GAAG,OAAnC,SACGjF,EAAE,gEAGL,uBAAOwoB,QAAQ,WAAW7mB,MAAO,CAAEmhB,QAAS,QAAShY,OAAQ,UAAW2d,aAAc,QAAtF,SACE,eAAC,IAAD,CAAM/f,WAAW,SAAjB,UACE,qBAAK/G,MAAO,CAAEC,KAAM,QAApB,SACE,cAAC,IAAD,CAAU8C,GAAG,WAAWsL,MAAM,KAAKmB,QAAS+W,EAAiB9W,SAjC1C,WAC/B+W,GAAoBD,QAkCV,cAAC,KAAD,CAAMld,GAAG,MAAT,SACGhL,EACC,qIAKR,uBAAOwoB,QAAQ,YAAY7mB,MAAO,CAAEmhB,QAAS,QAAShY,OAAQ,UAAW2d,aAAc,QAAvF,SACE,eAAC,IAAD,CAAM/f,WAAW,SAAjB,UACE,qBAAK/G,MAAO,CAAEC,KAAM,QAApB,SACE,cAAC,IAAD,CAAU8C,GAAG,YAAYsL,MAAM,KAAKmB,QAASiX,EAAiBhX,SAzC3C,WAC/BiX,GAAoBD,QA0CV,cAAC,KAAD,CAAMpd,GAAG,MAAT,SACGhL,EAAE,gGAKX,cAAC,IAAD,CAAQ0B,MAAM,OAAOI,QA7CL,WACpB8F,IACAD,KA2CiDwC,UAAW+d,IAAoBE,EAA5E,SACGpoB,EAAE,qBCqBE0oB,UAjFK,WAClB,MAAuBC,eAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACd,EAA8CC,aAAgB,EAAO,qCAArE,mBAAOC,EAAP,KAAwBC,EAAxB,KACM7Z,EAAS9O,cACTxC,EAAWC,cACXmrB,EAAeC,cACfC,EAAYP,GAAQC,EAE1B,EAAkC5e,aAAS,cAAC,GAAD,CAAgBrC,UAD3B,kBAAMohB,GAAmB,OAC0C,GAA5FI,EAAP,oBAGMC,EAA6BlpB,iBAAOipB,GAmD1C,OAjDAnrB,qBAAU,WACH8qB,GACHM,EAA2B7oB,YAE5B,CAACuoB,EAAiBM,IAErBprB,qBAAU,WAoCJgrB,EAAe,GAnCG,uCAAG,oDAAA7qB,EAAA,sEAC2B0E,QAAQwmB,IAAI,CAACC,cAA4BlrB,gBADpE,OAKvB,GALuB,4BAChBmrB,EADgB,KACOlrB,EADP,KAEf2Q,EAA+Cua,EAA/Cva,aAAcwa,EAAiCD,EAAjCC,eAAgBC,EAAiBF,EAAjBE,aAChCC,EAAcrrB,EAAW8kB,OAAOwG,MAAK,SAAC1oB,GAAD,OAAWA,EAAMwG,QAAUuH,KAElE3Q,EAAWurB,OAAOC,OACpBjsB,EAASksB,YAAoBja,IAAiBwW,cACzC,GAAIqD,GAAeA,EAAYjiB,QAAUuH,EAAc,CAK5D,IAJM+a,EAAyBrR,OAAOgR,EAAY7T,YAC5CmU,EAAe,GACfC,GAAgBT,EAAiBC,GAAgB,EAE9CS,EAAI,EAAGA,GAlCG,EAkCsBA,IACvCF,EAAaG,KAAKC,YAAwBpb,EAAekb,GAAIH,EAAyBE,GAAgBC,IAGlGG,EAAYC,YAAc,GAAD,mBAAKjsB,EAAW8kB,QAAhB,YAA2B6G,EAAarY,IAAI4Y,QAE3E3sB,EACE4sB,YAAW,2BACLjB,GADI,IAERnZ,cAAeC,IAAcG,IAC7Bia,6BAA8BV,EAC9B5G,OAAQkH,EACRK,QAAS,GACT9pB,KAAM,YAKVhD,EAASksB,YAAoBja,IAAiBuW,QA9BzB,2CAAH,oDAoCpBuE,KAED,CAAC3B,EAAcprB,IAElBD,IAEIuR,IAAWW,IAAiB+a,QACvB,cAACC,EAAA,EAAD,IAIP,qCACE,cAAC,IAAD,UACE,wBAAQ/lB,IAAI,mCAAmC0N,KAAK,kBAAkB/N,GAAG,wBAE3E,cAAC,EAAD,UACE,eAAC,EAAD,WACGykB,EAAY,cAAC,GAAD,IAAc,cAAC,GAAD,IAC3B,cAAC,EAAD,c,qPCtEG4B,EAAiB,WAC5B,IAAQC,EAAgBC,cAAhBD,YACR,EAAsCnrB,qBAAtC,mBAAOqrB,EAAP,KAAoBC,EAApB,KAYA,OAVAltB,qBAAU,WAAM,4CACd,8BAAAG,EAAA,6DACQgtB,EAAeC,cADvB,SAEuBD,EAAapiB,QAAQkiB,cAAc9d,OAF1D,OAEQke,EAFR,OAGEH,EAAe,IAAIzO,IAAU4O,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACP,IAEGE,GAGIM,EAAmB,SAACC,GAC/B,MAA8B5rB,mBAAS6rB,KAAvC,mBAAOlO,EAAP,KAAgBmO,EAAhB,KACQX,EAAgBC,cAAhBD,YACF7J,EAAOyK,cAYb,OAVA3tB,qBAAU,YACU,uCAAG,8BAAAG,EAAA,6DACbytB,EAAWC,YAAiBL,EAActK,GAD7B,SAED0K,EAAS7iB,QAAQ+iB,UAAU,8CAA8C3e,OAFxE,OAEb4e,EAFa,OAGnBL,EAAW,IAAIjP,IAAUsP,IAHN,2CAAH,qDAMlBC,KACC,CAAC9K,EAAMsK,EAAcT,IAEjBxN,GAGID,EAAmB,WAC9B,MAA8B1d,mBAAS6rB,KAAvC,mBAAOlO,EAAP,KAAgBmO,EAAhB,KACQ5tB,EAAYC,cAAZD,QACR,EAAwCmuB,cAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eACfjL,EAAOyK,cAab,OAXA3tB,qBAAU,WAMJF,GALc,uCAAG,4BAAAK,EAAA,sEACS+iB,EAAKE,IAAIgL,WAAWtuB,GAD7B,OACbuuB,EADa,OAEnBX,EAAW,IAAIjP,IAAU4P,IAFN,2CAAH,oDAMhBL,KAED,CAACluB,EAASojB,EAAMgL,EAAaR,IAEzB,CAAEnO,UAAS+O,QAASH,IAGdI,IA5ES,SAACf,GACvB,MAA8B5rB,mBAAS6rB,KAAvC,mBAAOlO,EAAP,KAAgBmO,EAAhB,KACQ5tB,EAAYC,cAAZD,QACFojB,EAAOyK,cACLa,EAAgBxB,cAAhBwB,YAcR,OAZAxuB,qBAAU,WAOJF,GANc,uCAAG,8BAAAK,EAAA,6DACbytB,EAAWC,YAAiBL,EAActK,GAD7B,SAED0K,EAAS7iB,QAAQ+iB,UAAUhuB,GAASqP,OAFnC,OAEb4e,EAFa,OAGnBL,EAAW,IAAIjP,IAAUsP,IAHN,2CAAH,oDAOhBC,KAED,CAACluB,EAAS0tB,EAActK,EAAMsL,IAE1BjP,I,6DCTM0O,IAXQ,WACrB,MAA2CrsB,mBAAS6sB,KAAKC,OAAzD,mBAAOR,EAAP,KAAoBS,EAApB,KAOA,MAAO,CAAET,cAAaU,oBANMxI,YAAiB8H,GAMFC,eAJpB,WACrBQ,EAAoBF,KAAKC,W,iCCZ7B,WAiBetI,IAVU,SAAC3hB,GACxB,IAAMxC,EAAMC,mBAMZ,OAJAlC,qBAAU,WACRiC,EAAIM,QAAUkC,KAGTxC,EAAIM,U,iCCdb,IACMssB,EAAkB,KAClBC,EAAiB,MACjBC,EAAmB,QACnBC,EAAkB,SAgDT3mB,IAzCQ,SAACG,GACtB,IAAIymB,EAAQpI,KAAKqI,IAAI1mB,GACf2mB,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNhnB,MAAO,EACPC,QAAS,EACTC,QAAS,GA8BX,OA3BIymB,GAASD,IACXG,EAASC,MAAQvI,KAAKC,MAAMmI,EAAQD,GACpCC,GAASE,EAASC,MAAQJ,GAGxBC,GAASF,IACXI,EAASE,OAASxI,KAAKC,MAAMmI,EAAQF,GACrCE,GAASE,EAASE,OAASN,GAGzBE,GAASH,IACXK,EAASG,KAAOzI,KAAKC,MAAMmI,EAAQH,GACnCG,GAASE,EAASG,KAAOR,GAGvBG,GAASJ,IACXM,EAAS7mB,MAAQue,KAAKC,MAAMmI,EAAQJ,GACpCI,GAASE,EAAS7mB,MAAQumB,GAGxBI,GA1CoB,KA2CtBE,EAAS5mB,QAAUse,KAAKC,MAAMmI,EA3CR,IA4CtBA,GA5CsB,GA4CbE,EAAS5mB,SAGpB4mB,EAAS3mB,QAAUymB,EAEZE","file":"static/js/10.e5d50c19.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon } from 'acentswap-uikit3'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceBnbBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchBet } from 'state/predictions'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getPayout } from '../../helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\nexport enum Result {\r\n  WIN = 'win',\r\n  LOSE = 'lose',\r\n  CANCELED = 'canceled',\r\n  LIVE = 'live',\r\n}\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchBet({ account, id: bet.id }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !bet.claimed && (\r\n          <CollectWinningsButton\r\n            payout={payout}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={bet.claimed}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{t('Your Result')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateMarketData } from 'state/predictions'\r\nimport { getMarketData } from 'state/predictions/helpers'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollRoundData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(async () => {\r\n      const marketData = await getMarketData()\r\n\r\n      dispatch(updateMarketData(marketData))\r\n    }, POLL_TIME_IN_SECONDS * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport default usePollRoundData\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from 'acentswap-uikit3'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        // Filter out bets that were not winners\r\n        const winnerBets = bets.filter((bet) => {\r\n          return bet.position === bet.round.position\r\n        })\r\n\r\n        if (!isHistoryPaneOpen) {\r\n          setIsOpen(winnerBets.length > 0)\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from 'acentswap-uikit3'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: 'en',\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme)\r\n      })\r\n    }\r\n  }, [theme])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from 'acentswap-uikit3'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t(\"This page can't be displayed right now due to an error. Please check back soon.\")}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been cancelled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import BigNumber from 'bignumber.js'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { DefaultTheme } from 'styled-components'\r\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const getBnbAmount = (bnbBn: BigNumber) => {\r\n  return getBalanceAmount(bnbBn, 18)\r\n}\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\r\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier\r\n}\r\n\r\n// TODO: Move this to the UI Kit\r\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\r\n  if (theme.isDark) {\r\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\r\n  }\r\n\r\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from 'acentswap-uikit3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceBnbBusd } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { formatBnb } from '../helpers'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: number\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const handleClick = () => {\r\n    predictionsContract.methods\r\n      .claim(epoch)\r\n      .send({ from: account })\r\n      .once('sending', () => {\r\n        setIsPendingTx(true)\r\n      })\r\n      .once('receipt', async (result) => {\r\n        if (onSuccess) {\r\n          await onSuccess()\r\n        }\r\n\r\n        setIsPendingTx(false)\r\n        onDismiss()\r\n        toastSuccess(\r\n          t('Winnings collected!'),\r\n          <Box>\r\n            <Text as=\"p\" mb=\"8px\">\r\n              {t('Your prizes have been sent to your wallet')}\r\n            </Text>\r\n            {result.transactionHash && (\r\n              <LinkExternal href={`https://bscscan.com/tx/${result.transactionHash}`}>\r\n                {t('View on BscScan')}\r\n              </LinkExternal>\r\n            )}\r\n          </Box>,\r\n        )\r\n      })\r\n      .once('error', (error) => {\r\n        setIsPendingTx(false)\r\n        toastError('Error', error?.message)\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Collecting')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from 'acentswap-uikit3'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: number\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from 'acentswap-uikit3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = () => {\r\n    predictionsContract.methods\r\n      .claim(epoch)\r\n      .send({ from: account })\r\n      .once('sending', () => {\r\n        setIsPendingTx(true)\r\n      })\r\n      .once('receipt', async () => {\r\n        if (onSuccess) {\r\n          await onSuccess()\r\n        }\r\n        setIsPendingTx(false)\r\n        toastSuccess(t('Position reclaimed!'))\r\n      })\r\n      .once('error', (error) => {\r\n        setIsPendingTx(false)\r\n        toastError('Error', error?.message)\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from 'acentswap-uikit3'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from 'acentswap-uikit3'\r\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, Round } from 'state/types'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: Round['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// LockPriceRow\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.borderColor\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from 'acentswap-uikit3'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const predictionsContract = usePredictionsContract()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\r\n\r\n      if (canClaim) {\r\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\r\n        setIsRefundable(refundable)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, predictionsContract, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n// Only support specific token pairs until we find a method to validate token pairs\r\nexport enum TokenPair {\r\n  BNBUSDT = 'bnbusdt',\r\n}\r\n\r\n/**\r\n * @see https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams\r\n */\r\nexport interface StreamData {\r\n  e: string\r\n  E: number\r\n  s: string\r\n  p: string\r\n  P: string\r\n  w: string\r\n  x: string\r\n  c: string\r\n  Q: string\r\n  b: string\r\n  B: string\r\n  a: string\r\n  A: string\r\n  o: string\r\n  h: string\r\n  l: string\r\n  v: string\r\n  q: string\r\n  O: number\r\n  C: number\r\n  F: number\r\n  L: number\r\n  n: number\r\n}\r\n\r\nexport interface TickerStream {\r\n  eventType: string\r\n  eventTime: number\r\n  symbol: string\r\n  priceChange: number\r\n  priceChangePercent: number\r\n  weightAveragePrice: number\r\n  firstTrade: number\r\n  lastPrice: number\r\n  lastQuantity: number\r\n  bestBidPrice: number\r\n  bestBidQuantity: number\r\n  bestAskPrice: number\r\n  bestAskQuantity: number\r\n  openPrice: number\r\n  highPrice: number\r\n  lowPrice: number\r\n  totalTradedBaseAssetVolume: number\r\n  totalTradedQuoteAssetVolume: number\r\n  statisticsOpenTime: number\r\n  statisticsCloseTime: number\r\n  firstTradeId: number\r\n  lastTradeId: number\r\n  totalNumberOfTrades: number\r\n}\r\n\r\nexport const useTokenPairTicker = (tokenPair: TokenPair, connectOnMount: boolean) => {\r\n  // Use a ref instead of state so we mark the connection as closed immediately without\r\n  // triggering a re-render\r\n  const isConnected = useRef(false)\r\n  const [stream, setStream] = useState<TickerStream>(null)\r\n  const websocket = useRef<WebSocket>(null)\r\n\r\n  const connect = useCallback(() => {\r\n    if (navigator.onLine && !isConnected.current) {\r\n      const ws = new WebSocket(`wss://stream.binance.com:9443/ws/streams/${tokenPair}@ticker`)\r\n\r\n      ws.onopen = () => {\r\n        isConnected.current = true\r\n      }\r\n\r\n      ws.onclose = () => {\r\n        isConnected.current = false\r\n      }\r\n\r\n      ws.onerror = (error) => {\r\n        console.error('Ticker:', error)\r\n        throw new Error('Ticker: An error occurred')\r\n      }\r\n\r\n      ws.onmessage = (evt) => {\r\n        try {\r\n          const data = JSON.parse(evt.data) as StreamData\r\n\r\n          if (isConnected.current) {\r\n            setStream({\r\n              eventType: data.e,\r\n              eventTime: data.E,\r\n              symbol: data.s,\r\n              priceChange: parseFloat(data.p),\r\n              priceChangePercent: parseFloat(data.P),\r\n              weightAveragePrice: parseFloat(data.w),\r\n              firstTrade: parseFloat(data.x),\r\n              lastPrice: parseFloat(data.c),\r\n              lastQuantity: Number(data.Q),\r\n              bestBidPrice: parseFloat(data.b),\r\n              bestBidQuantity: Number(data.B),\r\n              bestAskPrice: parseFloat(data.a),\r\n              bestAskQuantity: Number(data.A),\r\n              openPrice: parseFloat(data.o),\r\n              highPrice: parseFloat(data.h),\r\n              lowPrice: parseFloat(data.l),\r\n              totalTradedBaseAssetVolume: Number(data.v),\r\n              totalTradedQuoteAssetVolume: Number(data.q),\r\n              statisticsOpenTime: Number(data.O),\r\n              statisticsCloseTime: Number(data.C),\r\n              firstTradeId: Number(data.F),\r\n              lastTradeId: Number(data.L),\r\n              totalNumberOfTrades: Number(data.n),\r\n            })\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error parsing data from stream`, error)\r\n        }\r\n      }\r\n\r\n      websocket.current = ws\r\n    }\r\n  }, [websocket, tokenPair, isConnected, setStream])\r\n\r\n  const disconnect = useCallback(() => {\r\n    isConnected.current = false\r\n\r\n    if (websocket.current) {\r\n      websocket.current.close()\r\n    }\r\n  }, [isConnected, websocket])\r\n\r\n  useEffect(() => {\r\n    if (connectOnMount) {\r\n      connect()\r\n    }\r\n\r\n    return () => disconnect()\r\n  }, [websocket, connect, disconnect, connectOnMount, isConnected])\r\n\r\n  return { stream, isConnected: isConnected.current, connect, disconnect }\r\n}\r\n\r\n// Token pair helpers\r\nexport const useBnbUsdtTicker = (connectOnMount = true) => {\r\n  return useTokenPairTicker(TokenPair.BNBUSDT, connectOnMount)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Flex, Text, Link, Heading } from 'acentswap-uikit3'\r\nimport { getMultiplier } from '../../helpers'\r\nimport { PayoutRow, RoundResult } from '../RoundResult'\r\nimport BetResult, { Result } from './BetResult'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResult round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResult>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={`https://bscscan.com/block/${bet.round.lockBlock}`} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={`https://bscscan.com/block/${bet.round.endBlock}`} external>\r\n          {bet.round.endBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n} from 'acentswap-uikit3'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { markBetAsCollected } from 'state/predictions'\r\nimport { Bet, BetPosition, PredictionStatus } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getPayout } from '../../helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\nimport { Result } from './BetResult'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, claimed, position, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundResult = () => {\r\n    if (round.failed) {\r\n      return Result.CANCELED\r\n    }\r\n\r\n    if (round.epoch >= currentEpoch - 1) {\r\n      return Result.LIVE\r\n    }\r\n\r\n    return position === roundResultPosition ? Result.WIN : Result.LOSE\r\n  }\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    dispatch(markBetAsCollected({ account, betId: bet.id }))\r\n  }\r\n\r\n  const roundResult = getRoundResult()\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && !claimed && (\r\n          <CollectWinningsButton\r\n            onSuccess={handleSuccess}\r\n            hasClaimed={bet.claimed}\r\n            epoch={bet.round.epoch}\r\n            payout={payout}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && !claimed && (\r\n          <ReclaimPositionButton onSuccess={handleSuccess} epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult()} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ArrowForwardIcon, Box, Button, Radio, Flex, Heading, Text } from 'acentswap-uikit3'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { getBubbleGumBackground } from '../../helpers'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\nconst Header = () => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('Your History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Filter')}\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Filter>\r\n          <Radio\r\n            scale=\"sm\"\r\n            checked={historyFilter === HistoryFilter.ALL}\r\n            disabled={isFetchingHistory || !account}\r\n            onChange={handleChange(HistoryFilter.ALL)}\r\n          />\r\n          <Text ml=\"4px\">{t('All')}</Text>\r\n        </Filter>\r\n        <Filter>\r\n          <Radio\r\n            scale=\"sm\"\r\n            checked={historyFilter === HistoryFilter.COLLECTED}\r\n            disabled={isFetchingHistory || !account}\r\n            onChange={handleChange(HistoryFilter.COLLECTED)}\r\n          />\r\n          <Text ml=\"4px\">{t('Collected')}</Text>\r\n        </Filter>\r\n        <Filter>\r\n          <Radio\r\n            scale=\"sm\"\r\n            checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n            disabled={isFetchingHistory || !account}\r\n            onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n          />\r\n          <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n        </Filter>\r\n      </Flex>\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect } from 'react'\r\nimport { Box, Heading, Spinner, Text } from 'acentswap-uikit3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { orderBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoricalBet } from './components/History'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bets = useGetHistoryByAccount(account)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results =\r\n    historyFilter === HistoryFilter.UNCOLLECTED\r\n      ? bets.filter((bet) => {\r\n          return bet.position === bet.round.position || bet.round.failed === true\r\n        })\r\n      : bets\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header />\r\n      <BetWrapper>\r\n        {isFetchingHistory && (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        )}\r\n\r\n        {results && results.length > 0 ? (\r\n          orderBy(results, ['round.epoch'], ['desc']).map((bet) => {\r\n            return <HistoricalBet key={bet.id} bet={bet} />\r\n          })\r\n        ) : (\r\n          <Box p=\"24px\">\r\n            <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n              {t('No predictions history available')}\r\n            </Heading>\r\n            <Text as=\"p\" textAlign=\"center\">\r\n              {t(\r\n                'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n              )}\r\n            </Text>\r\n          </Box>\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from 'acentswap-uikit3'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { CheckmarkCircleIcon, Tag, useTooltip } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: number\r\n}\r\n\r\nconst StyledEnteredTag = styled(Tag).attrs({\r\n  variant: 'secondary',\r\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\r\n})`\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport { formatBnb } from '../../helpers'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  totalAmount?: number\r\n  betAmount?: number\r\n  multiplier?: number\r\n  hasEntered?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  totalAmount,\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"12px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"12px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n      <Text color={textColor} fontSize=\"12px\" lineHeight=\"18px\" textAlign=\"center\">\r\n        {`${formatBnb(totalAmount)} BNB`}\r\n      </Text>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" lineHeight=\"21px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import styled from 'styled-components'\r\nimport { Card as UIKitCard } from 'acentswap-uikit3'\r\n\r\nconst Card = styled(UIKitCard)`\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default Card\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from 'acentswap-uikit3'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  blockNumber: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.borderColor\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  border-radius: 16px 16px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from 'acentswap-uikit3'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch } from 'state/hooks'\r\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\r\nimport { markBetAsCollected } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport { getPayout } from '../../helpers'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  roundId: string\r\n  hasEntered: boolean\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 0;\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  roundId,\r\n  hasEntered,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState<{ betId: string; epoch: number; payout: number }>({\r\n    betId: null,\r\n    epoch: null,\r\n    payout: 0,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const [claimedLocal, setClaimedLocal] = useState(false)\r\n\r\n  // Check if the wallet can collect the bet\r\n  // We do it here because it is not guaranteed the bet info will be in the history\r\n  useEffect(() => {\r\n    const fetchBet = async () => {\r\n      const bets = await getBetHistory({ user: account.toLowerCase(), round: roundId, claimed: false })\r\n\r\n      if (bets.length === 1) {\r\n        const [firstBetResponse] = bets\r\n        const bet = transformBetResponse(firstBetResponse)\r\n\r\n        if (bet.position === bet.round.position) {\r\n          setState({\r\n            betId: bet.id,\r\n            epoch: bet.round.epoch,\r\n            payout: getPayout(bet),\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    if (account && hasEntered && !claimedLocal) {\r\n      fetchBet()\r\n    }\r\n  }, [account, roundId, hasEntered, currentEpoch, setState, claimedLocal])\r\n\r\n  if (!state.epoch) {\r\n    return null\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    dispatch(markBetAsCollected({ betId: state.betId, account }))\r\n    setState({ betId: null, epoch: null, payout: 0 })\r\n    setClaimedLocal(true)\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton\r\n        payout={state.payout}\r\n        epoch={state.epoch}\r\n        hasClaimed={false}\r\n        width=\"100%\"\r\n        onSuccess={handleSuccess}\r\n      >\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch, startBlock } = round\r\n  const estimatedEndBlock = startBlock + interval\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BlockIcon, CardBody } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id, endBlock, lockPrice, closePrice, bearAmount, bullAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const hasEntered = hasEnteredUp || hasEnteredDown\r\n\r\n  if (round.failed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <StyledExpiredRoundCard>\r\n      <CardHeader\r\n        status=\"expired\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n        title={t('Expired')}\r\n        blockNumber={endBlock}\r\n        epoch={round.epoch}\r\n      />\r\n      <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n        <CollectWinningsOverlay roundId={id} hasEntered={hasEntered} isBottom={hasEnteredDown} />\r\n        <MultiplierArrow\r\n          totalAmount={bullAmount}\r\n          betAmount={betAmount}\r\n          multiplier={bullMultiplier}\r\n          isActive={betPosition === BetPosition.BULL}\r\n          hasEntered={hasEnteredUp}\r\n        />\r\n        <RoundResult round={round} />\r\n        <MultiplierArrow\r\n          totalAmount={bearAmount}\r\n          betAmount={betAmount}\r\n          multiplier={bearMultiplier}\r\n          betPosition={BetPosition.BEAR}\r\n          isActive={betPosition === BetPosition.BEAR}\r\n          hasEntered={hasEnteredDown}\r\n        />\r\n      </CardBody>\r\n    </StyledExpiredRoundCard>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from 'acentswap-uikit3'\r\nimport { useBlock } from 'state/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n","import React from 'react'\r\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: Round\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\"This round's closing transaction has been submitted to the blockchain, and is waiting to be confirmed.\"),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\">\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon />\r\n                </span>\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, CardBody, Flex, LinkExternal, PlayCircleOutlineIcon, Text, useTooltip } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\r\nimport { useBnbUsdtTicker } from 'hooks/ticker'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, totalAmount } = round\r\n  const { stream } = useBnbUsdtTicker()\r\n  const { currentBlock } = useBlock()\r\n  const totalInterval = useGetIntervalBlocks()\r\n  const isBull = stream?.lastPrice > lockPrice\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlock = lockBlock + totalInterval\r\n  const priceDifference = stream?.lastPrice - lockPrice\r\n\r\n  const tooltipContent = (\r\n    <Box width=\"256px\">\r\n      {t('The final price at the end of a round may be different from the price shown on the live feed.')}\r\n      <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" mt=\"8px\">\r\n        {t('Learn More')}\r\n      </LinkExternal>\r\n    </Box>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom' })\r\n\r\n  if (round.failed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (currentBlock > estimatedEndBlock) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            totalAmount={round.bullAmount}\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              {stream && (\r\n                <>\r\n                  <div ref={targetRef}>\r\n                    <Text bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                      {formatUsd(stream.lastPrice)}\r\n                    </Text>\r\n                  </div>\r\n                  <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                    {formatUsd(priceDifference)}\r\n                  </PositionTag>\r\n                </>\r\n              )}\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            totalAmount={round.bearAmount}\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from 'acentswap-uikit3'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { ChangeEventHandler, useEffect, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from 'acentswap-uikit3'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { BetPosition } from 'state/types'\r\nimport { getDecimalAmount } from 'utils/formatBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport PositionTag from '../PositionTag'\r\nimport { getBnbAmount } from '../../helpers'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\nimport Card from './Card'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\r\n}\r\n\r\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getPercentDisplay = (percentage: number) => {\r\n  if (Number.isNaN(percentage)) {\r\n    return ''\r\n  }\r\n\r\n  if (percentage > 100) {\r\n    return ''\r\n  }\r\n\r\n  if (percentage < 0) {\r\n    return ''\r\n  }\r\n\r\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\r\n}\r\n\r\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: number) => {\r\n  if (bnbBalance.eq(0)) {\r\n    return { id: 999, fallback: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0) || value.isNaN()) {\r\n    return { id: 999, fallback: 'Enter an amount', disabled: true }\r\n  }\r\n  return { id: 464, fallback: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber()\r\n  const maxBalance = getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance).toNumber()\r\n  const valueAsBn = new BigNumber(value)\r\n\r\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\r\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber()\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (evt) => {\r\n    const newValue = evt.target.value\r\n    setValue(newValue)\r\n  }\r\n\r\n  const handleSliderChange = (newValue: number) => {\r\n    setValue(newValue.toString())\r\n  }\r\n\r\n  const setMax = () => {\r\n    setValue(maxBalance.toString())\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { fallback, disabled } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance)\r\n\r\n  const handleEnterPosition = () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n    const decimalValue = getDecimalAmount(valueAsBn)\r\n\r\n    predictionsContract.methods[betMethod]()\r\n      .send({ from: account, value: decimalValue })\r\n      .once('sending', () => {\r\n        setIsTxPending(true)\r\n      })\r\n      .once('receipt', async (result) => {\r\n        setIsTxPending(false)\r\n        onSuccess(decimalValue, result.transactionHash as string)\r\n      })\r\n      .once('error', (error) => {\r\n        const errorMsg = t('An error occurred, unable to enter your position')\r\n\r\n        toastError('Error!', error?.message)\r\n        setIsTxPending(false)\r\n        console.error(errorMsg, error)\r\n      })\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const bnValue = new BigNumber(value)\r\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ id: 999, fallback: 'Insufficient BNB balance' })\r\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\r\n      setErrorMessage({\r\n        fallback: 'A minimum amount of %num% %token% is required',\r\n        data: { num: minBetAmountBalance, token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading size=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.fallback, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t(`Balance: ${balanceDisplay}`, { num: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={maxBalance}\r\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\r\n          onValueChanged={handleSliderChange}\r\n          step={0.000000000000001}\r\n          valueLabel={account ? percentageDisplay : ''}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percent) => {\r\n            const handleClick = () => {\r\n              setValue(((percent / 100) * maxBalance).toString())\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percent}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percent}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(fallback)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t(\"You won't be able to remove or change your position once you enter it.\")}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\r\nimport { markPositionAsEntered } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnb, getBnbAmount } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + interval\r\n  const positionDisplay = position === BetPosition.BULL ? 'UP' : 'DOWN'\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + interval\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\r\n    // Optimistically set the user bet so we see the entered position immediately.\r\n    dispatch(\r\n      markPositionAsEntered({\r\n        account,\r\n        roundId: round.id,\r\n        partialBet: {\r\n          hash,\r\n          position,\r\n          amount: getBnbAmount(decimalValue).toNumber(),\r\n        },\r\n      }),\r\n    )\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      'Success!',\r\n      t(`${positionDisplay} position entered`, {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            totalAmount={round.bullAmount}\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n          />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            totalAmount={round.bearAmount}\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const web3 = getWeb3NoAccount()\r\n      const currentBlock = await web3.eth.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\r\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useRoundCountdown = (intervalsToAdd = 1) => {\r\n  const interval = useGetIntervalBlocks()\r\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\r\n  const blocksToAdd = intervalsToAdd * interval\r\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\r\n\r\n  return seconds\r\n}\r\n\r\nexport default useRoundCountdown\r\n","import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React, { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { fetchRoundBet } from 'state/predictions'\r\nimport { useAppDispatch } from 'state'\r\nimport { getMultiplier } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const bet = useGetBetByRoundId(account, id)\r\n  const hasEntered = bet !== null\r\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  // Perform a one-time check to see if the user has placed a bet\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchRoundBet({ account, roundId: id }))\r\n    }\r\n  }, [account, id, dispatch])\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={bet?.amount}\r\n        bullMultiplier={bullMultiplier}\r\n        bearMultiplier={bearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={bet?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={bullMultiplier}\r\n        bearMultiplier={bearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      betAmount={bet?.amount}\r\n      bullMultiplier={bullMultiplier}\r\n      bearMultiplier={bearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from 'acentswap-uikit3'\r\nimport { useBnbUsdtTicker } from 'hooks/ticker'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useRoundCountdown from '../hooks/useRoundCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 60px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: 16px;\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const { stream } = useBnbUsdtTicker()\r\n  const { lastPrice } = stream ?? {}\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">\r\n          {lastPrice &&\r\n            `$${lastPrice.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n        </Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval }) => {\r\n  const seconds = useRoundCountdown()\r\n  const countdown = formatRoundTime(seconds)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {seconds === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{interval}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from 'acentswap-uikit3'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Card)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from 'acentswap-uikit3'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from 'acentswap-uikit3'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from 'acentswap-uikit3'\r\nimport { useGetSortedRounds } from 'state/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC = () => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const initialIndex = Math.floor(rounds.length / 2)\r\n\r\n  useOnNextRound()\r\n\r\n  return (\r\n    <Box overflowX=\"hidden\" overflowY=\"auto\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={initialIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.id}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from 'acentswap-uikit3'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\n\r\nenum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { ArrowDownIcon, Button, ChartIcon } from 'acentswap-uikit3'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\nconst PositionsPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  min-height: 506px;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst ChartPane = styled.div<{ isChartPaneOpen: boolean }>`\r\n  height: ${({ isChartPaneOpen }) => (isChartPaneOpen ? '100%' : 0)};\r\n  position: relative;\r\n`\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  top: -32px;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    dispatch(setChartPaneState(!isChartPaneOpen))\r\n  }\r\n\r\n  return (\r\n    <StyledDesktop>\r\n      <ContentWrapper>\r\n        {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n        {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n        {status === PredictionStatus.LIVE && (\r\n          <>\r\n            <PositionsPane>\r\n              <Positions />\r\n            </PositionsPane>\r\n            <ChartPane isChartPaneOpen={isChartPaneOpen}>\r\n              <ExpandChartButton\r\n                variant=\"tertiary\"\r\n                scale=\"sm\"\r\n                startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n                onClick={toggleChartPane}\r\n              >\r\n                {isChartPaneOpen ? t('Close') : t('Charts')}\r\n              </ExpandChartButton>\r\n              <TradingView />\r\n            </ChartPane>\r\n          </>\r\n        )}\r\n      </ContentWrapper>\r\n      <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n        <History />\r\n      </HistoryPane>\r\n    </StyledDesktop>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from 'acentswap-uikit3'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from 'acentswap-uikit3'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from 'acentswap-uikit3'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading size=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from 'acentswap-uikit3'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useInitialBlock } from 'state/hooks'\r\nimport {\r\n  getMarketData,\r\n  getStaticPredictionsData,\r\n  makeFutureRoundResponse,\r\n  makeRoundData,\r\n  transformRoundResponse,\r\n} from 'state/predictions/helpers'\r\nimport { initialize, setPredictionStatus } from 'state/predictions'\r\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/PageLoader'\r\nimport usePollRoundData from './hooks/usePollRoundData'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\n\r\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\r\n\r\nconst Predictions = () => {\r\n  const { isLg, isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\r\n  const status = useGetPredictionsStatus()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isLg || isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\r\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\r\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\r\n\r\n      if (marketData.market.paused) {\r\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\r\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\r\n        const currentRoundStartBlock = Number(latestRound.startBlock)\r\n        const futureRounds = []\r\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\r\n\r\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\r\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\r\n        }\r\n\r\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\r\n\r\n        dispatch(\r\n          initialize({\r\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\r\n            historyFilter: HistoryFilter.ALL,\r\n            currentRoundStartBlockNumber: currentRoundStartBlock,\r\n            rounds: roundData,\r\n            history: {},\r\n            bets: {},\r\n          }),\r\n        )\r\n      } else {\r\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\r\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\r\n      }\r\n    }\r\n\r\n    // Do not start initialization until the first block has been retrieved\r\n    if (initialBlock > 0) {\r\n      fetchInitialData()\r\n    }\r\n  }, [initialBlock, dispatch])\r\n\r\n  usePollRoundData()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = () => {\r\n    setStateLastUpdated(Date.now())\r\n  }\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n"],"sourceRoot":""}